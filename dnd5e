import random

# Python Final for Frank Cancovatchel created by Molly Shapiro and Ainsley Smith. Enjoy over 2,300 lines of code, godspeed.
# Creates class menu
'''Classes and their stats are taken from D&D 5th edition, we are only doing 7 of the classes, and we are not putting 
subclasses or races, there are an endless amount of subclasses and races that would limit the character creator even more
'''

# Creates class menu
class_menu = """1. Wizard
2. Cleric
3. Rogue
4. Monk
5. Bard
6. Barbarian
7. Paladin"""


''' Classes and stats in D&D make out the majority of a character's abilities, different classes prioritize 
different things, such as strength or wisdom, below is a brief description of each class mentioned on DnD Beyond,
and by the creators of 5e - Wizards of the West Coast'''

def classmenu(class_menu):
    """
    Prints descriptions of each class
    :param class_menu: Choice for which class on the list to learn about
    :return: None
    """
    if class_menu == "1":
       print("""Wizard - A scholarly magic-user capable of manipulating the structures of reality. Your primary ability
       is intelligence. Your saves are intelligence and wisdom. Your hit die is d6.""")
    elif class_menu == "2":
       print("""Cleric - A priestly champion who wields divine magic in service of a higher power. Your primary
       ability is wisdom. Your saves are wisdom and charisma. Your hit dice is a d8.""")
    elif class_menu == "3":
       print("""Rogue - A scoundrel who uses stealth and trickery to overcome obstacles and enemies. Your primary
       ability is dexterity. Your saves are dexterity and intelligence. Your hit die is a d8.""")
    elif class_menu == "4":
       print("""Monk - A master of martial arts, harnessing the power of the body in pursuit of physical and
        spiritual perfection. Your primary abilities are dexterity and wisdom. Your saves are strength and dexterity.
        Your hit die is a d8.""")
    elif class_menu == "5":
       print("""Bard - An inspiring magician whose power echoes the music of creation. Your primary ability is
        charisma. Your saves are dexterity and charisma. Your hit die is a d8""")
    elif class_menu == "6":
       print("""Barbarian - A fierce warrior of primitive background who can enter a battle rage. Your primary
        ability is strength. Your saves are strength and constitution. Your hit die is a d12.""")
    elif class_menu == "7":
       print("""Paladin - A holy warrior bound to a sacred oath. Your primary abilities are strength and charisma.
       Your saves are wisdom and charisma. Your hit die is a d10.""")

# Initializes dictionaries for statistics and modifiers
stats_dict = {}
modifierslist = {}
hitpoints = 0
to_hit = 0
db = 0
ac = 0
spellslots = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0}
skillslist = []

# Creates functions for dice rolling
def d20_roll():
    roll = random.randint(1, 20)
    return roll

def d6_roll():
    roll = random.randint(1, 6)
    return roll

def d4_roll():
    roll = random.randint(1, 4)
    return roll

def d8_roll():
    roll = random.randint(1, 8)
    return roll

def d10_roll():
    roll = random.randint(1, 10)
    return roll

def d12_roll():
    roll = random.randint(1, 12)
    return roll

# Lets the user choose their starting level
def choose_level():
    level = int(input("Please enter the level you would like your character to be (1-20): "))
    return level

# A roll lower than 8 is a poor roll, and can be futile for a player, many people use a house rule that lets no roll below 8 stay
def reroll(stat):
    """
    Rerolls stats to ensure that they aren't lower than 8
    :param stat: rolled statistic
    :return: rolled statistic that's greater than or equal to 8
    """
    while True:
        if(stat >= 8):
            return stat
        else:
            stat = d6_roll() + d6_roll() + d6_roll()
            reroll(stat)

# Rolls standard statistics
def stats_roll():
    """
    Standard DND 5E stat rolling is 4d6 and dropping the lowest number, but that isn't possible here,
    so we had it roll 3d6 and handled low stat fixes in the above function.
    :return: List of rolled stats
    """
    stat1 = d6_roll() + d6_roll() + d6_roll()
    stat1 = reroll(stat1)
    stat2 = d6_roll() + d6_roll() + d6_roll()
    stat2 = reroll(stat2)
    stat3 = d6_roll() + d6_roll() + d6_roll()
    stat3 = reroll(stat3)
    stat4 = d6_roll() + d6_roll() + d6_roll()
    stat4 = reroll(stat4)
    stat5 = d6_roll() + d6_roll() + d6_roll()
    stat5 = reroll(stat5)
    stat6 = d6_roll() + d6_roll() + d6_roll()
    stat6 = reroll(stat6)
    rolled_stats = [stat1, stat2, stat3, stat4, stat5, stat6]
    return rolled_stats

# Allows users to assign rolled stats to their chosen categories
# Users should place their rolls into their stats based on priority of the class for the best possibility,
# for clerics, you prioritize wisdom, for barbarians you prioritize strength etc
def stats():
    """
    Allows users to assign rolled stats to chosen categories
    :return: Dictionary with rolled stat values paired with the chosen main statistic
    """
    rolled_stats = stats_roll()
    print("Here are your stats:", rolled_stats)
    stren = int(input("Which stat would you like to be your strength stat? "))
    rolled_stats.remove(stren)
    stats_dict["strength"] = stren
    print("Here are your stats:", rolled_stats)
    dex = int(input("Which stat would you like to be your dexterity stat? "))
    rolled_stats.remove(dex)
    stats_dict["dexterity"] = dex
    print("Here are your stats:", rolled_stats)
    con = int(input("Which stat would you like to be your constitution stat? "))
    rolled_stats.remove(con)
    stats_dict["constitution"] = con
    print("Here are your stats:", rolled_stats)
    intel = int(input("Which stat would you like to be your intelligence stat? "))
    rolled_stats.remove(intel)
    stats_dict["intelligence"] = intel
    print("Here are your stats:", rolled_stats)
    wis = int(input("Which stat would you like to be your wisdom stat? "))
    rolled_stats.remove(wis)
    stats_dict["wisdom"] = wis
    print("Here are your stats:", rolled_stats)
    cha = int(input("Which stat would you like to be your charisma stat? "))
    rolled_stats.remove(cha)
    stats_dict["charisma"] = cha
    return stats_dict

# Assigns modifiers for each skill
def modifiers(statslist):
    """
    Handles modifiers for each statistic (based on 5E rules, bonus to rolls for that stat)
    :param statslist: dictionary of statistics
    :return: dictionary of modifiers
    """
    for i in statslist.keys():
        if 10 <= statslist[i] <= 11:
            modifierslist[i] = 0
        else:
            modifierslist[i] = (statslist[i] - 10) // 2
    return modifierslist

def printstats(stats_dict):
    """
    Prints statistics to the console
    :param stats_dict: statistics dictionary
    :return: none
    """
    print("Here are your stats:")
    print("Strength:", stats_dict["strength"])
    print("Intelligence:", stats_dict["intelligence"])
    print("Dexterity:", stats_dict["dexterity"])
    print("Constitution:", stats_dict["constitution"])
    print("Wisdom:", stats_dict["wisdom"])
    print("Charisma:", stats_dict["charisma"])
    pass

def printmodifiers(modifierslist):
    """
    Prints modifiers to the console
    :param modifierslist: dictionary of modifiers
    :return: none
    """
    print("Here are your modifiers: ")
    print("Strength:", modifierslist["strength"])
    print("Intelligence:", modifierslist["intelligence"])
    print("Dexterity:", modifierslist["dexterity"])
    print("Constitution:", modifierslist["constitution"])
    print("Wisdom:", modifierslist["wisdom"])
    print("Charisma:", modifierslist["charisma"])
    pass

def printskills(skillslist):
    """
    Prints all skills for the character to the console
    :param skillslist: list of class skills
    :return: none
    """
    for i in skillslist:
        print(i)

def rerollhp(hitpointroll, die):
    """
    Rerolls hitpoints to ensure that they aren't lower than 2
    :param hitpointroll: rolled hitpoint value
    :param die: hit die
    :return: rolled statistic that's greater than or equal to 2
    """
    while True:
        if(hitpointroll >= 2):
            return hitpointroll
        else:
            if die == "d6":
                hitpointroll = d6_roll()
                rerollhp(hitpointroll, die)
            elif die == "d8":
                hitpointroll = d8_roll()
                rerollhp(hitpointroll, die)
            elif die == "d10":
                hitpointroll = d10_roll()
                rerollhp(hitpointroll, die)
            elif die == "d12":
                hitpointroll = d12_roll()
                rerollhp(hitpointroll, die)

def hitpointcalc(level, die):
    i = 1
    hitpoints = 0
    if die == "d6":
        while i <= level:
            hproll = d6_roll()
            hproll = rerollhp(hproll, die)
            hitpoints = hitpoints + hproll
            i = i + 1
    elif die == "d8":
        while i <= level:
            hproll = d8_roll()
            hproll = rerollhp(hproll, die)
            hitpoints = hitpoints + hproll
            i = i + 1
    elif die == "d10":
        while i <= level:
            hproll = d10_roll()
            hproll = rerollhp(hproll, die)
            hitpoints = hitpoints + hproll
            i = i + 1
    elif die == "d12":
        while i <= level:
            hproll = d12_roll()
            hproll = rerollhp(hproll, die)
            hitpoints = hitpoints + hproll
            i = i + 1
    return hitpoints

# A hit bonus is the benefit a player gets based on their class and stats - their ability to hit a target
def hitbonus(modifierslist, stat):
    """
    Creates the bonus to hit for the primary stat
    :param modifierslist: list of stat modifiers
    :param stat: primary stat
    :return: bonus to attack rolls
    """
    to_hit = modifierslist[stat]
    return to_hit

# A damage bonus is the benefit a player gets based on their class and stats - how much extra damage you do per hit
def damagebonus(modifierslist, stat):
    """
    creates bonus to damage rolls for primary attacks
    :param modifierslist: list of stat modifiers
    :param stat: primary stat
    :return: bonus to damage rolls
    """
    db = modifierslist[stat]
    return db

# This defines the ability someone else has to hit you, if your armor class is 17, then a roll of 15 will not hit you
def armorclass(modifierslist, stat):
    """
    creates armor class
    :param modifierslist: list of stat modifiers
    :param stat: stat that AC is based off of for that class
    :return: armor class
    """
    ac = 10 + modifierslist[stat]
    return ac

# Proficiency bonus' are constant no matter what class you are, it just depends on level
def proficiencybonus(level):
    """
    Returns proficiency bonus based on level
    :param level: character level
    :return: proficiency bonus
    """
    if level < 5:
        proficiency = 2
        return proficiency
    elif 5 <= level < 9:
        proficiency = 3
        return proficiency
    elif 9 <= level < 13:
        proficiency = 4
        return proficiency
    elif 13 <= level < 17:
        proficiency = 5
        return proficiency
    else:
        proficiency = 6
        return proficiency

# As a player levels up, they can choose an ability score improves either by two, or two scores to increase by one, or they can instead choose a feat - a helpful skill
def abilityscoreimprovement(level, stats):
    """
    Allows the user to choose ability score improvements based on level- stats can be increased at certain levels
    :param level: character level
    :param stats: statistics dictionary
    :return: modified stats
    """
    if level < 4:
        return stats
    else:
        if 4 <= level:
            print("You get to add +1 to two ability scores (or +2 to one), or you can take a feat. (Level 4)")
            userchoice = input("Please enter Y if you want the ability score increase or N to take a feat. ")
            if userchoice == "Y":
                statschoice1 = input("Please enter your first choice of stat increase. ")
                if stats[statschoice1] < 20:
                    stats[statschoice1] = stats[statschoice1] + 1
                else:
                    print("Sorry, that stat is already maxed out. Please choose another stat.")
                    statschoice1 = input("Please enter your choice of stat increase.")
                    pass
                statschoice2 = input("Please enter your second choice of stat increase. ")
                if stats[statschoice2] < 20:
                    stats[statschoice2] = stats[statschoice2] + 1
                else:
                    print("Sorry, that stat is already maxed out. Please choose another stat.")
                    statschoice2 = input("Please enter your choice of stat increase.")
                    pass
            if 8 <= level:
                print("You get to add +1 to two ability scores (or +1 to two), or you can take a feat. (Level 8)")
                userchoice = input("Please enter Y if you want the ability score increase or N to take a feat. ")
                if userchoice == "Y":
                    statschoice1 = input("Please enter your first choice of stat increase. ")
                    if stats[statschoice1] < 20:
                        stats[statschoice1] = stats[statschoice1] + 1
                    else:
                        print("Sorry, that stat is already maxed out. Please choose another stat.")
                        statschoice1 = input("Please enter your choice of stat increase.")
                        pass
                    statschoice2 = input("Please enter your second choice of stat increase. ")
                    if stats[statschoice2] < 20:
                        stats[statschoice2] = stats[statschoice2] + 1
                    else:
                        print("Sorry, that stat is already maxed out. Please choose another stat.")
                        statschoice2 = input("Please enter your choice of stat increase.")
                        pass
                if 12 <= level:
                    print("You get to add +1 to two ability scores (or +1 to two), or you can take a feat. (Level 12)")
                    userchoice = input("Please enter Y if you want the ability score increase or N to take a feat. ")
                    if userchoice == "Y":
                        statschoice1 = input("Please enter your first choice of stat increase. ")
                        if stats[statschoice1] < 20:
                            stats[statschoice1] = stats[statschoice1] + 1
                        else:
                            print("Sorry, that stat is already maxed out. Please choose another stat.")
                            statschoice1 = input("Please enter your choice of stat increase.")
                            pass
                        statschoice2 = input("Please enter your second choice of stat increase. ")
                        if stats[statschoice2] < 20:
                            stats[statschoice2] = stats[statschoice2] + 1
                        else:
                            print("Sorry, that stat is already maxed out. Please choose another stat.")
                            statschoice2 = input("Please enter your choice of stat increase.")
                            pass
                    if 16 <= level:
                        print("You get to add +1 to two ability scores (or +1 to two), or you can take a feat. (Level 16)")
                        userchoice = input(
                            "Please enter Y if you want the ability score increase or N to take a feat. ")
                        if userchoice == "Y":
                            statschoice1 = input("Please enter your first choice of stat increase. ")
                            if stats[statschoice1] < 20:
                                stats[statschoice1] = stats[statschoice1] + 1
                            else:
                                print("Sorry, that stat is already maxed out. Please choose another stat.")
                                statschoice1 = input("Please enter your choice of stat increase.")
                                pass
                            statschoice2 = input("Please enter your second choice of stat increase. ")
                            if stats[statschoice2] < 20:
                                stats[statschoice2] = stats[statschoice2] + 1
                            else:
                                print("Sorry, that stat is already maxed out. Please choose another stat.")
                                statschoice2 = input("Please enter your choice of stat increase.")
                                pass
                        if 19 <= level:
                            print("You get to add +1 to two ability scores (or +1 to two), or you can take a feat. (Level 19)")
                            userchoice = input(
                                "Please enter Y if you want the ability score increase or N to take a feat. ")
                            if userchoice == "Y":
                                statschoice1 = input("Please enter your first choice of stat increase. ")
                                if stats[statschoice1] < 20:
                                    stats[statschoice1] = stats[statschoice1] + 1
                                else:
                                    print("Sorry, that stat is already maxed out. Please choose another stat.")
                                    statschoice1 = input("Please enter your choice of stat increase.")
                                    pass
                                statschoice2 = input("Please enter your second choice of stat increase. ")
                                if stats[statschoice2] < 20:
                                    stats[statschoice2] = stats[statschoice2] + 1
                                else:
                                    print("Sorry, that stat is already maxed out. Please choose another stat.")
                                    statschoice2 = input("Please enter your choice of stat increase.")
                                    pass
                            return stats
                        else:
                            return stats
                    else:
                        return stats
                else:
                    return stats
            else:
                return stats
        else:
            return stats

# Shows user their entire list of choices they've made that comes out to their character
def fileprint(name, classchoice, level, stats, modifiers, proficiency, hitpoint, armor, hitbonus, db, skills, classfeatures):
    """
    Writes all character information to a file for later use
    :param name: character name
    :param classchoice: chosen class
    :param level: chosen level
    :param stats: dictionary of main stats
    :param modifiers: dictionary of modifiers
    :param proficiency: proficiency bonus
    :param hitpoint: hitpoints
    :param armor: armor class
    :param hitbonus: bonus to attack rolls
    :param db: bonus to damage rolls
    :param skills: list of skills from class features
    :param classfeatures: specific class feature (ex. ki points, bardic inspiration die)
    :return: none
    """
    file = name + ".txt"
    with open(file, "w") as f:
        f.write("Your character's name is " + name)
        f.write("\n")
        if classchoice == "1":
            f.write("Your class is wizard")
            f.write("\n")
        elif classchoice == "2":
            f.write("Your class is cleric")
            f.write("\n")
        elif classchoice == "3":
            f.write("Your class is rogue")
            f.write("\n")
        elif classchoice == "4":
            f.write("Your class is monk")
            f.write("\n")
        elif classchoice == "5":
            f.write("Your class is bard")
            f.write("\n")
        elif classchoice == "7":
            f.write("Your class is barbarian")
            f.write("\n")
        elif classchoice == "8":
            f.write("Your class is paladin")
            f.write("\n")
        else:
            print("You don't have a valid class choice")
            f.write("\n")
        f.write("Your level is " + str(level) + ".")
        f.write("\n")
        f.write("Your stats are: ")
        f.write("\n")
        f.write("Strength: " + str(stats["strength"]))
        f.write("\n")
        f.write("Intelligence: " + str(stats["intelligence"]))
        f.write("\n")
        f.write("Dexterity: " + str(stats["dexterity"]))
        f.write("\n")
        f.write("Constitution: " + str(stats["constitution"]))
        f.write("\n")
        f.write("Wisdom: " + str(stats["wisdom"]))
        f.write("\n")
        f.write("Charisma: " + str(stats["charisma"]))
        f.write("\n")
        f.write("Here are your modifiers: ")
        f.write("\n")
        f.write("Strength: " + str(modifiers["strength"]))
        f.write("\n")
        f.write("Intelligence: " + str(modifiers["intelligence"]))
        f.write("\n")
        f.write("Dexterity: " + str(modifiers["dexterity"]))
        f.write("\n")
        f.write("Constitution: " + str(modifiers["constitution"]))
        f.write("\n")
        f.write("Wisdom: " + str(modifiers["wisdom"]))
        f.write("\n")
        f.write("Charisma: " + str(modifiers["charisma"]))
        f.write("\n")
        f.write("Your proficiency bonus is " + str(proficiency))
        f.write("\n")
        f.write("You have " + str(hitpoint) + " hitpoints.")
        f.write("\n")
        f.write("Your armor class is " + str(armor) + ".")
        f.write("\n")
        f.write("You have a " + str(hitbonus) + " bonus to hit with primary attacks.")
        f.write("\n")
        f.write("You have a " + str(db) + " bonus to damage with primary attacks.")
        f.write("\n")
        f.write("Your class skills are: ")
        f.write("\n")
        for i in skills:
            f.write(i)
            f.write("\n")
        if classchoice == "1":
            f.write("Your class feature is spells")
            f.write("\n")
            f.write("Your spell slots are:")
            f.write("\n")
            for i in classfeatures.keys():
                f.write("Level " + str(i) + " spells: " + str(classfeatures[i]))
                f.write("\n")
        elif classchoice == "2":
            f.write("Your class feature is spells")
            f.write("\n")
            f.write("Your spell slots are:")
            f.write("\n")
            for i in classfeatures.keys():
                f.write("Level " + str(i) + " spells: " + str(classfeatures[i]))
                f.write("\n")
        elif classchoice == "3":
            f.write("Your class feature is sneak attack")
            f.write("\n")
            f.write("Your sneak attack damage is " + str(classfeatures) + ".")
            f.write("\n")
        elif classchoice == "4":
            f.write("Your class feature is ki points")
            f.write("\n")
            f.write("You have " + str(classfeatures) + " ki points")
            f.write("\n")
        elif classchoice == "5":
            f.write("Your class feature is spells")
            f.write("\n")
            f.write("Your spells slots are:")
            f.write("\n")
            for i in classfeatures.keys():
                f.write("Level " + str(i) + " spells: " + str(classfeatures[i]))
                f.write("\n")
        elif classchoice == "7":
            f.write("Your class feature is rage")
            f.write("\n")
            f.write("Your rage bonus is a " + str(classfeatures) + ".")
            f.write("\n")
        elif classchoice == "8":
            f.write("Your class feature is spells")
            f.write("\n")
            f.write("Your spells slots are:")
            f.write("\n")
            for i in classfeatures.keys():
                f.write("Level " + str(i) + " spells: " + str(classfeatures[i]))
                f.write("\n")
        else:
            print("You don't have a valid class choice")
            f.write("\n")

# Entire list of wizard spells in the base game and then some, sorted by level
# Also, Spell lists were manually entered in with some alteration from dnd5e.wikidot.com/spells
def wizard_spells():
   inputwiznum  = input("""This is a list of wizard spells, it will tell you the Spell Name, School of Magic, Casting Time,
   Range, Duration, and Components. Please enter what level you would like to see the spells for 0-9. If you would like to exit,
   please type 'EXIT':""")
   if inputwiznum == "0":
       wiz0 = (['Acid Splash - Conjuration - 1 Action - 60 feet - Instantaneous - V,S',
                'Blade Ward - Abjuration - 1 Action - Self - 1 round - V,S',
                'Booming Blade - Evocation - 1 Action - Self(5-foot radius) - 1 round - S,M',
                'Chill Touch - Necromancy - 1 Action - 120 feet - 1 round - V,S',
                'Control Flames - Transmutation - 1 Action - 60 feet - Instantaneous or 1 hour - S',
                'Create Bonfire - Conjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S',
                'Dancing Lights - Evocation - 1 Action - 120 feet - Concentration, up to 1 minute - V,S,M',
                'Encode Thoughts - Enchantment - 1 Action - Self - 8 hours - S',
                'Fire Bolt - Evocation - 1 Action - 120 feet - Instantaneous - V,S',
                'Friends - Enchantment - 1 Action - Self - Concentration, up to 1 minute - S,M',
                'Frostbite - Evocation - 1 Action - 60 feet - Instantaneous - V,S',
                'Green-Flame Blade - Evocation - 1 Action - Self(5-foot radius) - Instantaneous - S,M',
                'Gust - Transmutation - 1 Action - 30 feet - Instantaneous - V,S',
                'Infestation - Conjuration - 1 Action - 30 feet - Instantaneous - V,S,M',
                'Light - Evocation - 1 Action - Touch - 1 hour - V,M',
                'Lightning Lure - Evocation - 1 Action - Self(15-foot radius - Instantaneous - V',
                'Mage Hand - Conjuration - 1 Action - 30 feet - 1 minute - V,S',
                'Mending - Transmutation - 1 Minute - Touch - Instantaneous - V,S,M',
                'Message - Transmutation - 1 Action - 120 feet - 1 round - V,S,M',
                'Mind Sliver - Enchantment - 1 Action - 60 feet - 1 round - V',
                'Minor Illusion - Illusion - 1 Action - 30 feet - 1 minute - S,M',
                'Mold Earth - Transmutation - 1 Action - 30 feet - Instantaneous or 1 hour - S',
                'Poison Spray - Conjuration - 1 Action - 10 feet - Instantaneous - V,S',
                'Prestidigitation - Transmutation - 1 Action - 10 feet - Up to 1 hour - V,S',
                'Ray of Frost - Evocation - 1 Action - 60 feet - Instantaneous - V,S',
                'Shape Water - Transmutation - 1 Action - 30 feet - Instantaneous or 1 hour - S',
                'Shocking Grasp - Evocation - 1 Action - Touch - Instantaneous - V,S',
                'Sword Burst - Conjuration - 1 Action - Self(5-foot radius) - Instantaneous - V',
                'Thunderclap - Evocation - 1 Action - Self(5-foot radius) - Instantaneous - S',
                'Toll the Dead - Necromancy - 1 Action - 60 feet - Instantaneous - V,S',
                'True Strike - Divination - 1 Action - 30 feet - Concentration up to 1 round - S'])
       print(*wiz0, sep='\n')
   elif inputwiznum == '1':
       wiz1 = (['Absorb Elements - Abjuration - 1 Reaction - Self - 1 round - S',
                'Alarm - Abjuration - 1 Action(ritual) - 30 feet - 8 hours - V,S,M',
                'Burning Hands - Evocation - 1 Action - Self(15-foot cone) - Instantaneous - V,S',
                'Catapult - Transmutation - 1 Action - 60 feet - Instantaneous - S',
                'Cause Fear - Necromancy - 1 Action - 60 feet - Concentration, up to 1 minute - V,S',
                'Charm Person - Enchantment - 1 Action - 30 feet - 1 hour - V,S',
                'Chromatic Orb - Evocation - 1 Action - 90 feet - Instantaneous - V,S,M',
                'Color Spray - Illusion - 1 Action - Self(15-foot cone) - 1 round - V,S,M',
                'Comprehend Languages - Divination - 1 Action(ritual) - Self - 1 hour - V,S,M',
                'Detect Magic - Divination - 1 Action(ritual) - Self - Concentration, up to 10 minutes - V,S',
                'Disguise Self - Illusion - 1 Action - Self - 1 hour - V,S',
                'Distort Value - Illusion - 1 Minute - Touch - 8 hours - V',
                'Earth Tremor - Evocation - 1 Action - Self(10-foot radius) - Instantaneous - V,S',
                'Expeditious Retreat - Transmutation - 1 Bonus Action - Self - Concentration, up to 10 minutes - V,S',
                'False Life - Necromancy - 1 Action - Self - 1 hour - V,S,M',
                'Feather Fall - Transmutation - 1 Reaction - 60 feet - 1 minute - V,M',
                'Find Familiar - Conjuration - 1 Hour(ritual) - 10 feet - Instantaneous - V,S,M',
                'Fog Cloud - Conjuration - 1 Action - 120 feet - Concentration, up to 1 hour - V,S',
                'Frost Fingers - Evocation - 1 Action - Self(15-foot cone) - Instantaneous - V,S',
                'Grease - Conjuration - 1 Action - 60 feet - 1 minute - V,S,M',
                'Ice Knife - Conjuration - 1 Action - 60 feet - Instantaneous - S,M',
                'Identify - Divination - 1 Minute(ritual) - Touch - Instantaneous - V,S,M',
                'Illusory Script - Illusion - 1 Minute(ritual) - Touch - 10 days - S,M',
                'Jump - Transmutation - 1 Action - Touch - 1 minute - V,S,M',
                'Longstrider - Transmutation - 1 Action - Touch - 1 hour - V,S,M',
                'Mage Armor - Abjuration - 1 Action - Touch - 8 hours - V,S,M',
                'Magic Missile - Evocation - 1 Action - 120 feet - Instantaneous - V,S',
                'Projection from Good and Evil - Abjuration - 1 Action - Touch - Concentration, up to 10 minutes - V,S,M',
                'Ray of Sickness - Necromancy - 1 Action - 60 feet - Instantaneous - V,S',
                'Shield - Abjuration - 1 Reaction - Self - 1 round - V,S',
                'Silent Image - Illusion - 1 Action - 60 Feet - Concentration, up to 10 minutes - V,S,M',
                'Silvery Barbs - Enchantment - 1 Reaction - 60 feet - Instantaneous - V',
                'Sleep - Enchantment - 1 Action - 90 feet - 1 minute - V,S,M',
                'Snare - Abjuration - 1 Minute - Touch - Until dispelled or triggered - V,S,M',
                "Tasha's Caustic Brew - Evocation - 1 Action - Self(30-foot line) - Concentration, up to 1 minute - V,S,M",
                "Tasha's Hideous Laughter - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M",
                "Tenser's Floating Disk - Conjuration - 1 Action(ritual) - 30 feet - 1 hour - V,S,M",
                'Thunderwave - Evocation - 1 Action - Self(15-foot cube) - Instantaneous - V,S',
                'Unseen Servant - Conjuration - 1 Action(ritual) - 60 feet - 1 hour - V,S,M',
                'Witch Bolt - Evocation - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M'])
       print(*wiz1, sep = '\n')
   elif inputwiznum == '2':
       wiz2 = (["Aganazzar's Scorcher - Evocation - 1 Action - 30 feet - Instantaneous - V,S,M",
                'Alter Self - Transmutation - 1 Action - Self - Concentration, up to 1 hour - V,S',
                'Arcane Lock - Abjuration - 1 Action - Touch - Until dispelled - V,S,M',
                'Augury - Divination - 1 Minute(ritual) - Self - Instantaneous - V,S,M',
                'Blindness/Deafness - Necromancy - 1 Action - 30 feet - 1 minute - V',
                'Blur - Illusion - 1 Action - Self - Concentration, up to 1 minute - V',
                'Borrowed Knowledge - Divination - 1 Action - Self - 1 hour - V,S,M',
                'Cloud of Daggers - Conjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                'Continual Flame - Evocation - 1 Action - Touch - Until dispelled - V,S,M',
                'Crown of Madness - Enchantment - 1 Action - 120 feet - Concentration, up to 1 minute - V,S',
                'Darkness - Evocation - 1 Action - 60 feet - Concentration, up to 10 minutes - V,M',
                'Darkvision - Transmutation - 1 Action - Touch - 8 hours - V,S,M',
                'Detect Thoughts - Divination - 1 Action - Touch - Concentration, up op 1 minute - V,S,M',
                "Dragon's Breath - Transmutation - 1 Bonus Action - Touch - Concentration, up to 1 minute",
                'Dust Devil - Conjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                'Earthbind - Transmutation - 1 Action - 300 feet - Concentration, up to 1 minute - V',
                'Enhance Ability - Transmutation - 1 Action - Touch - Concentration, up to 1 hour - V,S,M',
                'Enlarge/Reduce - Transmutation - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M',
                'Flaming Sphere - Conjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                'Flock of Familiars - Conjuration - 1 Minute - Touch - Concentration, up to 1 hour - V,S',
                'Gentle Repose - Necromancy - 1 Action(ritual) - Touch - 10 days - V,S,M',
                'Gift of Gab - Enchantment - Reaction - Self - Instantaneous - V,S,M',
                'Gust of Wind - Evocation - 1 Action - Self(60-foot line) - Concentration, up to 1 minute - V,S,M',
                'Hold Person - Enchantment - 1 Action - 60 feet - Concentration, up to one minute - V,S,M',
                'Invisibility - Illusion - 1 Action - Touch - Concentration, up to 1 hour - V,S,M',
                "Jim's Glowing Coin - Enchantment - 1 Action - 60 feet - 1 minute - S,M",
                'Kinetic Jaunt - Transmutation - 1 Bonus Action - Self - Concentration, up to 1 minute - S',
                'Knock - Transmutation - 1 Action - 60 feet - Instantaneous - V',
                'Levitate - Transmutation - 1 Action - 60 feet - Concentration, up to 10 minutes - V,S,M',
                'Locate Object - Divination - 1 Action - Self - Concentration, up to 10 minutes - V,S,M',
                'Magic Mouth - Illusion - 1 Minute(ritual) - 30 feet - Until dispelled - V,S,M',
                'Magic Weapon - Transmutation - 1 Bonus Action - Touch - Concentration, up to 1 hour - V,S',
                "Maximillian's Earthen - Transmutation - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M",
                "Melf's Acid Arrow - Evocation - 1 Action - 90 feet - Instantaneous - V,S,M",
                'Mind Spike - Divination - 1 Action - 60 feet - Concentration, up to 1 hour - S',
                'Mirror Image - Illusion - 1 Action - Self - 1 minute - V,S',
                'Misty Step - Conjuration - 1 Bonus Action - Self - Instantaneous - V',
                "Nathair's Mischief - Illusion - 1 Action - 60 feet - Concentration, up to 1 minute - S,M",
                "Nystul's Magic Aura - Illusion - 1 Action - Touch - 24 hours - V,S,M",
                'Phantasmal Force - Illusion - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                'Pyrotechnics - Transmutation - 1 Action - 60 feet - Instantaneous - V,S',
                'Ray of Enfeeblement - Necromancy - 1 Action - 60 feet - Concentration, up to 1 minute - V,S',
                "Rime's Binding Ice - Evocation - 1 Action - Self(30-foot cone) - Instantaneous - S,M",
                'Rope Trick - Transmutation - 1 Action - Touch - 1 hour - V,S,M',
                'Scorching Ray - Evocation - 1 Action - 120 feet - Instantaneous - V,S',
                'See Invisibility - Divination - 1 Action - Self - 1 hour - V,S,M',
                'Shadow Blade - Illusion - 1 Bonus Action - Self - Concentration, up to 1 minute - V,S',
                'Shatter - Evocation - 1 Action - 60 feet - Instantaneous - V,S,M',
                'Skywrite - Transmutation - 1 Action(ritual) - Sight - Concentration - up to 1 day - V,S',
                "Snilloc's Snowball Storm - Evocation - 1 Action - 90 feet - Instantaneous - V,S,M",
                'Spider Climb - Transmutation - 1 Action - Touch - Concentration, up to 1 hour - V,S,M',
                'Suggestion - Enchantment - 1 Action - 30 feet - Concentration, up to 8 hours - V,M',
                "Tasha's Mind Whip - Enchantment - 1 Action - 90 feet - 1 round - V",
                'Vortex Whip - Conjuration - 1 Action - 90 feet - Instantaneous - V,S',
                'Warding Wind - Evocation - 1 Action - Self - Concentration, up to 10 minutes - V',
                'Web - Conjuration - 1 Action - 60 feet - Concentration, up to 1 hour - V,S,M',
                'Wither and Bloom - Necromancy - 1 Action - 60 feet - Instantaneous - V,S,M'])
       print(*wiz2, sep = '\n')

   elif inputwiznum == "3":
       wiz3 = (['Animate Dead - Necromancy - 1 Minute - 10 feet - Instantaneous - V,S,M',
                "Ashardalon's Stride - Transmutation - 1 Bonus Action - Self - Concentration, up tp 1 minute - V,S",
                'Bestow Curse - Necromancy - 1 Action - Touch - Concentration, up to 1 minute - V,S',
                'Blink - Transmutation - 1 Action - Self - 1 minute - V,S',
                'Catnap - Enchantment - 1 Action - 30 feet - 10 minutes - S,M',
                'Clairvoyance - Divination - 10 minutes - 1 mile - Concentration, up to 10 minutes - V,S,M',
                'Counterspell - Abjuration - 1 Reaction - 60 feet - Instantaneous - S',
                'Dispel Magic - Abjuration - 1 Action - 120 feet - Instantaneous - V,S',
                'Enemies Abound - Enchantment - 1 Action - 120 feet - Concentration, up to 1 minute - V,S',
                'Erupting Earth - Transmutation - 1 Action - 120 feet - Instantaneous - V,S,M',
                'Fast Friends - Enchantment - 1 Action - 30 feet - Concentration, up to 1 hour - V',
                'Fear - Illusion - 1 Action - Self(30-foot cone) - Concentration, up to 1 minute - V,S,M',
                'Feign Death - Necromancy - 1 Action(ritual) - Touch - 1 hour - V,S,M',
                'Fireball - Evocation - 1 Action - 150 feet - Instantaneous - V,S,M',
                'Flame Arrows - Transmutation - 1 Action - Touch - Concentration, up to 1 hour - V,S',
                'Fly - Transmutation - 1 Action - Touch - Concentration, up to 10 minutes - V,S,M',
                "Galder's Tower - Conjuration - 10 minutes - 30 feet - 24 hours - V,S,M",
                'Gaseous Form - Transmutation - 1 Action - Touch - Concentration, up to 1 hour - V,S,M',
                'Glyph of Warding - Abjuration - 1 Hour - Touch - Until dispelled or triggered - V,S,M',
                'Haste - Transmutation - 1 Action - 30 feet - Concentration, up to 1 minute - V,S',
                'Hypnotic Pattern - Illusion - 1 Action - 120 feet - Concentration, up to 1 minute - S,M',
                'Intellect Fortress - Abjuration - 1 Action - 30 feet - Concentration, up to 1 hour - V',
                "Leomund's Tiny Hut - Evocation - 1 Minute(ritual) - Self(10-foot radius hemisphere - 8 hours - V,S,M",
                'Life Transference - Necromancy - 1 Action - 30 feet - Instantaneous - V,S',
                'Lightning Bolt - Evocation - 1 Action - Self(100-foot line) - Instantaneous - V,S,M',
                'Magic Circle - Abjuration - 1 Minute - 10 feet - 1 hour - V,S,M',
                'Major Image - Illusion - 1 Action - 120 feet - Concentration,up to 10 minutes - V,S,M',
                "Melf's Minute Meteors - Evocation - Self - 120 feet - Concentration, up to 10 minutes - V,S,M",
                'Nondetection - Abjuration - 1 Action - Touch - 8 hours - V,S,M',
                'Phantom Steed - Illusion - 1 Action(ritual) - 30 feet - 1 hour - V,S',
                'Protection from Energy - Abjuration - 1 Action - Touch - Concentration, up ti 1 hour - V,S',
                'Remove Curse - Abjuration - 1 Action - Touch - Instantaneous - V,S',
                'Sending - Evocation - 1 Action - Unlimited - 1 round - V,S,M',
                'Sleet Storm - Conjuration - 1 Action - 120 feet - Concentration, up to 1 minute - V,S,M',
                'Slow - Transmutation - 1 Action - 120 feet - Concentration, up to 1 minute - V,S,M',
                'Speak with Dead - Necromancy - 1 Action - 10 feet - 10 minutes -V,S,M',
                'Spirit Shroud - Necromancy - 1 Bonus Action - Self - Concentration, up to 1 minute - V,S',
                'Stinking Cloud - Conjuration - 1 Action - 90 feet - Concentration, up to 1 minute - V,S,M',
                'Summon Fey - Conjuration - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M',
                'Summon Lesser Demons - Conjuration - 1 Action - 60 feet - Concentration, up to 1 hour - V,S,M',
                'Summon Shadowspawn - Conjuration - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M',
                'Summon Undead - Necromancy - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M',
                'Thunder Step - Conjuration - 1 Action - 90 feet - Instantaneous - V',
                'Tidal Wave - Conjuration - 1 Action - 120 feet - Instantaneous - V,S,M',
                'Tiny Servant - Transmutation - 1 Minute - Touch - 8 hours - V,S',
                'Tongues - Divination - 1 Action - Touch - 1 hour - V,M',
                'Vampiric Touch - Necromancy - 1 Action - Self - Concentration, up to 1 minute - V,S',
                'Wall of Sand - Evocation - 1 Action - 90 feet - Concentration, up to 10 minutes - V,S,M',
                'Wall of Water - Evocation - 1 Action - 60 feet - Concentration, up to 10 minutes - V,S,M',
                'Water Breathing - Transmutation - 1 Action(ritual) - 30 feet - 24 hours - V,S,M'])
       print(*wiz3, sep = '\n')

   elif inputwiznum == '4':
       wiz4 = (['Arcane Eye - Divination - 1 Action - 30 feet - Concentration, up to 1 hour - V,S,M',
                'Banishment - Abjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                'Blight - Necromancy - 1 Action - 30 feet - Instantaneous - V,S',
                'Charm Monster - Enchantment - 1 Action - 30 feet - 1 hour - V,S',
                'Confusion - Enchantment - 1 Action - 90 feet - Concentration, up to 1 minute - V,S,M',
                'Conjure Minor Elements - Conjuration - 1 Minute - 90 feet - Concentration, up to 1 hour - V,S',
                'Control Water - Transmutation - 1 Action - 300 feet - Concentration, up to 10 minutes - V,S,M',
                'Dimension Door - Conjuration - 1 Action - 500 feet - Instantaneous - V',
                'Divination - Divination - 1 Action(ritual) - Self - Instantaneous - V,S,M',
                'Element Bane - Transmutation - 1 Action - 90 feet - Concentration, up to 1 minute - V,S',
                "Evard's Black Tentacles - Conjuration - 1 Action - 90 feet - Concentration, up to 1 minute - V,S,M",
                'Fabricate - Transmutation - 10 Minutes - 120 feet - Instantaneous - V,S',
                'Fire Shield - Evocation - 1 Action - Self - 10 minutes - V,S,M',
                "Galder's Speedy Courier - Conjuration - 1 Action - 10 feet - 10 minutes - V,S,M",
                'Grater Invisibility - Illusion - 1 Action - Touch - Concentration, up to 1 minute - V,S',
                'Hallucinatory Terrain - Illusion - 10 Minutes - 300 feet - 24 hours - V,S,M',
                'Ice Storm - Evocation - 1 Action - 300 feet - Instantaneous - V,S,M',
                "Leomund's Secret Chest - Conjuration - 1 Action - Touch - Instantaneous - V,S,M,",
                'Locate Creature - Divination - 1 Action - Self - Concentration, up to 1 hour - V,S,M',
                "Mordenkainen's Faithful Hound - Conjuration - 1 Action - 30 feet - 8 hours - V,S,M",
                "Mordenkainen's Private Sanctum - Abjuration - 1 Action - 120 feet - 24 hours - V,S,M",
                "Otiluke's Resilient Sphere - Evocation - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M",
                'Phantasmal Killer - Illusion - 1 Action - 120 feet - Concentration, up to 1 minute - V,S,M',
                'Polymorph - Transmutation - 1 Action - 60 feet - Concentration, up to 1 hour - V,S,M',
                "Raulothim's Psychic Lance - Enchantment - 1 Action - 120 feet - Instantaneous - V",
                'Sickening Radiance - Evocation - 1 Action - 120 feet - Concentration, up to 10 minutes - V,S',
                'Stone Shape - Transmutation - 1 Action - Touch - Instantaneous - V,S,M',
                'Stoneskin - Abjuration - 1 Action - Touch - Concentration, up to 1 hour - V,S,M',
                'Storm Sphere - Evocation - 1 Action - 150 feet - Concentration, up to 1 minute - V,S',
                'Summon Aberration - Conjuration - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M',
                'Summon Construct - Conjuration - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M',
                'Summon Elemental - Conjuration - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M',
                'Summon Greater Demon - Conjuration - 1 Action - 60 feet - Concentration, up to 1 hour - V,S,M',
                'Vitriolic Sphere - Evocation - 1 Action - 150 feet - Instantaneous - V,S,M',
                'Wall of Fire - Evocation - 1 Action - 120 feet - Concentration, up to 1 minute - V,S,M',
                'Watery Sphere - Conjuration - 1 Action - 90 feet - Concentration, up to 1 minute - V,S,M',])
       print(*wiz4, sep = '\n')
   elif inputwiznum == '5':
       wiz5 = (['Animate Objects - Transmutation - 1 Action - 120 feet - Concentration, up to 1 minute - V,S',
                "Bigby's Hand - Evocation - 1 Action - 120 feet - Concentration, up to 1 minute - V,S,M",
                'Cloudkill - Conjuration - 1 Action - 120 feet - Concentration, up to 10 minutes - V,S',
                'Cone of Cold - Evocation - 1 Action - Self(60-foot cone) - Instantaneous - V,S,M',
                'Conjure Elemental - Conjuration - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M',
                'Contact Other Plane - Divination - 1 Minute(ritual) - Self - 1 minute - V',
                'Control Winds - Transmutation - 1 Action - 300 feet - Concentration, up to 1 hour - V,S',
                'Creation - Illusion - 1 Minute - 30 feet - Special - V,S,M',
                'Danse Macabre - Necromancy - 1 Action - 60 feet - Concentration, up to 1 hour - V,S',
                'Dawn - Evocation - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                'Dominate Person - Enchantment - 1 Action - 60 feet - Concentration, up to 1 minute - V,S',
                'Dream - Illusion - 1 Minute - Special - 8 hours - V,S,M',
                'Enervation - Necromancy - 1 Action - 60 feet - Concentration, up to 1 minute - V,S',
                'Far Step - Conjuration - 1 Bonus Action - Self - Concentration, up to 1 minute = V',
                'Geas - Enchantment - 1 Minute - 60 feet - 30 days - V',
                'Hold Monster - Enchantment - 1 Action - 90 feet - Concentration, up to 1 minute - V,S,M',
                'Immolation - Evocation - 1 Action - 90 feet - Concentration, up to 1 minute - V',
                'Infernal Calling - Conjuration - 1 Minute - 90 feet - Concentration, up to 1 hour - V,S,M',
                'Legend Lore - Divination - 10 minutes - Self - Instantaneous - V,S,M',
                'Mislead - Illusion - 1 Action - Self - Concentration, up to 1 hour - S',
                'Modify Memory - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S',
                'Negative Energy Flood - Necromancy - 1 Action - 60 feet - Instantaneous - V,M',
                'Passwall - Transmutation - 1 Action - 30 feet - 1 hour - V,S,M',
                'Planar Binding - Abjuration - 1 Hour - 60 feet - 24 hours - V,S,M',
                "Rary's Telepathic Bond - Divination - 1 Action(ritual) - 30 feet - 1 hour - V,S,M",
                'Scrying - Divination - 10 Minutes - Self - Concentration, up to 10 minutes - V,S,M',
                'Seeming - Illusion - 1 Action - 30 feet - 8 hours - V,S',
                'Skill Empowerment - Transmutation - 1 Action - Touch - Concentration, up to 1 hour - V,S',
                'Steel Wind Strike - Conjuration - 1 Action - 30 feet - Instantaneous - S,M',
                'Summon Draconic Spirit - Conjuration - 1 Action - 60 feet - Concentration, up to 1 hour - V,S,M',
                'Synaptic Static - Enchantment - 1 Action - 120 feet - Instantaneous - V,S',
                'Telekinesis - Transmutation - 1 Action - 60 feet - Concentration, up to 10 minutes - V,S',
                'Teleportation Circle - Conjuration - 1 Minute - 10 feet - 1 round - V,M',
                'Transmute Rock - Transmutation - 1 Action - 120 feet - Instantaneous - V,S,M',
                'Wall of Force - Evocation - 1 Action - 120 feet - Concentration, up to 10 minutes - V,S,M',
                'Wall of Light - Evocation - 1 Action - 120 feet - Concentration, up to 10 minutes - V,S,M',
                'Wall of Stone - Evocation - 1 Action - 120 feet - Concentration, up to 10 minutes - V,S,M',])
       print(*wiz5, sep = '\n')

   elif inputwiznum == '6':
       wiz6 = (['Arcane Gate - Conjuration - 1 Action - 500 feet - Concentration, up to 10 minutes - V,S',
                'Chain Lightning - Evocation - 1 Action - 150 feet - Instantaneous - V,S,M',
                'Circle of Death - Necromancy - 1 Action - 150 feet - Instantaneous - V,S,M',
                'Contingency - Evocation - 10 minutes - Self - 10 days - V,S,M',
                'Create Homunculus -  Transmutation - 1 Hour - 120 feet - Instantaneous - V,S,M',
                'Create Undead - Necromancy - 1 Minute - 10 feet - Instantaneous - V,S,M',
                'Disintegrate - Transmutation - 1 Action - 60 feet - Instantaneous - V,S,M',
                "Drawmij's Instant Summons - Conjuration - 1 Minute(ritual) - Touch - Until dispelled - V,S,M",
                'Eyebite - Necromancy - 1 Action - Self - Concentration, up to 1 minute - V,S',
                "Fizban's Platinum Shield - Abjuration - 1 Bonus Action - 60 feet - Concentration, up to 1 minute - V,S,M",
                'Flesh to Stone - Transmutation - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                'Globe of Invulnerability - Abjuration - 1 Action - Self(10-foot radius) - Concentration, up to 1 minute - V,S,M',
                'Guards and Wards - Abjuration - 10 Minutes - Touch - 24 hours - V,S,M',
                'Investiture of Flame - Transmutation - 1 Action - Self - Concentration, up to 10 minutes - V,S',
                'Investiture of Ice - Transmutation - 1 Action - Self - Concentration, up to 10 minutes - V,S',
                'Investiture of Stone - Transmutation - 1 Action - Self - Concentration, up to 10 minutes - V,S',
                'Investiture of Wind - Transmutation - 1 Action - Self - Concentration, up to 10 minutes - V,S',
                'Magic Jar - Necromancy - 1 Minute - Self - Until dispelled - V,S,M',
                'Mass Suggestion - Enchantment - 1 Action - 60 feet - 24 hours - V,M',
                'Mental Prison - Illusion - 1 Action - 60 feet - Concentration, up to 1 minute - S',
                'Move Earth - Transmutation - 1 Action - 120 feet - Concentration, up to 2 hours - V,S,M',
                "Otiluke's Freezing Sphere - Evocation - 1 Action - 300 feet - Instantaneous - V,S,M",
                "Otto's Irresistible Dance - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V",
                'Programmed Illusion - Illusion - 1 Action - 120 feet - Until dispelled - V,S,M',
                'Scatter - Conjuration - 1 Action - 30 feet - Instantaneous - V',
                'Soul Cage - Necromancy - Special - 60 feet - 8 hours - V,S,M',
                'Summon Fiend - Conjuration - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M',
                'Sunbeam - Evocation - 1 Action - Self(60-foot line) - V,S,M',
                "Tasha's Otherworldly Guise - Transmutation - 1 Bonus Action - Self - Concentration, up to 1 minute - V,S,M",
                "Tenser's Transformation - Transmutation - 1 Action - Self - Concentration, up to 10 minutes - V,S,M",
                'True Seeing - Divination - 1 Action - Touch - 1 hour - V,S,M',
                'Wall of Ice - Evocation - 1 Action - 120 feet - Concentration, up to 10 minutes - V,S,M',])
       print(*wiz6, sep = '\n')

   elif inputwiznum == '7':
       wiz7 = (['Create Magen - Transmutation - 1 Hour - Touch - Instantaneous - V,S,M',
                'Crown of Stars - Conjuration - 1 Action - Self - 1 hour - V,S',
                'Delayed Blast Fireball - Evocation - 1 Action - 150 feet - Concentration, up to 1 minute - V,S,M',
                'Draconic Transformation - Transmutation - 1 Bonus Action - Self - Concentration, up to 1 minute - V,S,M',
                'Dream of the Blue Veil - Conjuration - 10 Minutes - 20 feet - 6 hours - V,S,M',
                'Etherealness - Transmutation - 1 Action - Self - Up to 8 hours - V,S',
                'Finger of Death - Necromancy - 1 Action - 60 feet - Instantaneous - V,S',
                'Forcecage - Evocation - 1 Action - 100 feet - 1 hour - V,S,M',
                'Mirage Arcane - Illusion - 10 Minutes - Sight - 10 days - V,S',
                "Mordenkainen's Magnificent Mansion - Conjuration - 1 Minute - 300 feet - 24 hours - V,S,M",
                "Mordenkainen's Sword - Evocation - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M",
                'Plane Shift - Conjuration - 1 Action - Touch - Instantaneous - V,S,M',
                'Power Word: Pain - Enchantment - 1 Action - 60 feet - Instantaneous - V',
                'Prismatic Spray - Evocation - 1 Action - Self(60-foot cone) - Instantaneous - V,S',
                'Project Image - Illusion - 1 Action - 500 miles - Concentration, up to 1 day - V,S,M',
                'Reverse Gravity - Transmutation - 1 Action - 100 feet - Concentration, up to 1 minute - V,S,M',
                'Sequester - Transmutation - 1 Action - Touch - Until dispelled - V,S,M',
                'Simulacrum - Illusion - 12 Hours - Touch - Until dispelled - V,S,M',
                'Symbol - Abjuration - 1 Minute - Touch - Until dispelled or triggered - V,S,M',
                'Teleport - Conjuration - 1 Action - 10 feet - Instantaneous - V',
                'Whirlwind - Evocation - 1 Action - 300 feet - Concentration, up to 1 minute - V,M'])
       print(*wiz7, sep = '\n')

   elif inputwiznum  == '8':
       wiz8 = (["Abi-Dalzim's Horrid Wilting - Necromancy - 1 Action - 150 feet - Instantaneous - V,S,M",
                'Antimagic Field - Abjuration - 1 Action - Self(10-foot radius sphere) - Concentration, up to 1 hour - V,S,M',
                'Antipathy/Sympathy - Enchantment - 1 Hour - 60 feet - 10 days - V,S,M',
                'Clone - Necromancy - 1 Hour - Touch - Instantaneous - V,S,M',
                'Control Water - Transmutation - 10 Minutes - Self(5-mile radius) - Concentration, up to 8 hours - V,S,M',
                'Demiplane - Conjuration - 1 Action - 60 feet - 1 hour - S',
                'Dominate Monster - Enchantment - 1 Action - 60 feet - Concentration, up to 1 hour - V,S',
                'Feeblemind - Enchantment - 1 Action - 150 feet - Instantaneous - V,S,M',
                'Illusory Dragon - Illusion - 1 Action - 120 feet - Concentration, up to 1 minute - S',
                'Incendiary Cloud - Conjuration - 1 Action - 150 feet - Concentration, up to 1 minute - V,S',
                'Maddening Darkness - Evocation - 1 Action - 150 feet - Concentration, up to 10 minutes - V,M',
                'Maze - Conjuration - 1 Action - 60 feet - Concentration, up to 10 minutes - V,S',
                'Mighty Fortress - Conjuration - 1 Minute - 1 mile - Instantaneous - V,S,M',
                'Mind Blank - Abjuration - 1 Action - Touch - 24 hours - V,S',
                'Power Word: Stun - Enchantment - 1 Action - 60 feet - Instantaneous - V,S',
                'Sunburst - Evocation - 1 Action - 150 feet - Instantaneous - V,S,M',
                'Telepathy - Evocation - 1 Action - Unlimited - 24 hours - V,S,M'])
       print(*wiz8, sep = '\n')

   elif inputwiznum == '9':
       wiz9 = (['Astral Projection - Evocation - 1 Hour - 10 feet - Special - V,S,M',
                'Blade of Disaster - Conjuration - 1 Bonus Action - 60 feet - Concentration, up to 1 minute - V,S',
                'Foresight - Divination - 1 Minute - Touch - 8 hours - V,S,M',
                'Gate - Conjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                'Imprisonment - Abjuration - 1 Minute - 30 feet - Until dispelled - V,S,M',
                'Invulnerability - Abjuration - 1 Action - Self - Concentration, up to 10 minutes - V,S,M',
                'Mass Polymorph - Transmutation - 1 Action - 120 feet - Concentration, up to 10 minutes - V,S,M',
                'Meteor Swarm - Evocation - 1 Action - 1 mile - Instantaneous - V,S',
                'Power Word: Kill - Enchantment - 1 Action - 60 feet - Instantaneous - V',
                'Prismatic Wall - Abjuration - 1 Action - 60 feet - 10 minutes - V,S',
                'Psychic Scream - Enchantment - 1 Action - 90 feet - Instantaneous - S',
                'Shapechange - Transmutation - 1 Action - Self - Concentration, up to 1 hour - V,S,M',
                'Time Stop - Transmutation - 1 Action - Self - Instantaneous - V',
                'True Polymorph - Transmutation - 1 Action - 30 feet - Concentration, up to 1 hour - V,S,M',
                'Weird - Illusion - 1 Action 120 feet - Concentration, up to 1 minute - V,S',
                'Wish - Conjuration - 1 Action - Self - Instantaneous - V'])
       print(*wiz9, sep = '\n')

   elif inputwiznum == 'EXIT':
       exit(inputwiznum)

def wizard_features(level):
    if level >= 1:
        print("You have two first-level class features: Spellcasting and Arcane Recovery.")
        spellslots[0] = 3
        spellslots[1] = 2
        skillslist.append("Spellcasting")
        skillslist.append("Arcane Recovery")
        if level >= 2:
            spellslots[1] = 3
            print("You can choose your Arcane Tradition:")
            if level >= 3:
                spellslots[1] = 4
                spellslots[2] = 2
                if level >= 4:
                    spellslots[0] = 4
                    spellslots[2] = 3
                    print("You have an ability score improvement.")
                    if level >= 5:
                        spellslots[3] = 2
                        if level >= 6:
                            spellslots[3] = 3
                            print("You have your 6th-level Arcane Tradition feature.")
                            skillslist.append("6th-level Arcane Tradition Feature")
                            if level >= 7:
                                spellslots[4] = 1
                                if level >= 8:
                                    spellslots[4] = 2
                                    print("You have a second ability score improvement.")
                                    if level >= 9:
                                        spellslots[4] = 3
                                        spellslots[5] = 1
                                        if level >= 10:
                                            spellslots[0] = 5
                                            spellslots[5] = 2
                                            print("You have your 10th-level Arcane Tradition feature.")
                                            skillslist.append("10th-level Arcane Tradition Feature")
                                            if level >= 11:
                                                spellslots[6] = 1
                                                if level >= 12:
                                                    print("You have a third ability score improvement.")
                                                    if level >= 13:
                                                        spellslots[7] = 1
                                                        if level >= 14:
                                                            print("You have your 14th-level Arcane Tradition feature.")
                                                            skillslist.append("14th-level Arcane Tradition Feature")
                                                            if level >= 15:
                                                                spellslots[8] = 1
                                                                if level >= 16:
                                                                    print("You have a fourth ability score improvement.")
                                                                    if level >= 17:
                                                                        spellslots[9] = 1
                                                                        if level >= 18:
                                                                            spellslots[5] = 3
                                                                            print("You have Spell Mastery.")
                                                                            skillslist.append("Spell Mastery")
                                                                            if level >= 19:
                                                                                spellslots[6] = 2
                                                                                print("You have your final ability score improvement.")
                                                                                if level >= 20:
                                                                                    spellslots[7] = 2
                                                                                    print("You have Signature Spells.")
                                                                                    skillslist.append("Signature Spells")
                                                                                    return spellslots, skillslist
                                                                                else:
                                                                                    print("Error")
                                                                            else:
                                                                                return spellslots, skillslist
                                                                        else:
                                                                            return spellslots, skillslist
                                                                    else:
                                                                        return spellslots, skillslist
                                                                else:
                                                                    return spellslots, skillslist
                                                            else:
                                                                return spellslots, skillslist
                                                        else:
                                                            return spellslots, skillslist
                                                    else:
                                                        return spellslots, skillslist
                                                else:
                                                    return spellslots, skillslist
                                            else:
                                                return spellslots, skillslist
                                        else:
                                            return spellslots, skillslist
                                    else:
                                        return spellslots, skillslist
                                else:
                                    return spellslots, skillslist
                            else:
                                return spellslots, skillslist
                        else:
                            return spellslots, skillslist
                    else:
                        return spellslots, skillslist
                else:
                    return spellslots, skillslist
            else:
                return spellslots, skillslist
        else:
            return spellslots, skillslist
    else:
        return spellslots, skillslist

def printspellslots(spellslots):
    for i in spellslots.keys():
        print("Level", i, "spells:", spellslots[i])

def wizard():
    level = choose_level()
    print("Time to roll some stats! For wizards, you should prioritize intelligence as your highest stat," + "\n" +
          "followed by dexterity and constitution to give your wizard some extra protection. They're squishy!")
    statlist = stats()
    newstats = abilityscoreimprovement(level, statlist)
    printstats(newstats)
    mods = modifiers(newstats)
    proficiency = proficiencybonus(level)
    print("Your proficiency bonus is", proficiency, "and is added to any ability score you have proficiency in.")
    print("Great, now you have your stats!")
    hitpoints = hitpointcalc(level, "d6") + (mods["constitution"] * level)
    print("You have", hitpoints, "hitpoints.")
    to_hit = hitbonus(mods, "intelligence") + proficiency
    print("You have a", to_hit, "bonus to hit with any spell attacks.")
    db = 0
    ac = armorclass(mods, "dexterity")
    print("Your unarmored armor class is a", ac, "to hit. Any roll to hit below this number doesn't hit you!")
    spellslots, skills = wizard_features(level)
    return level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, spellslots, skills

#wizard()

def monk_features(level):
    movement = 0
    if level >= 1:
        print("Your class skills are Unarmored Defense and Martial Arts. Your martial arts die is a d4.")
        skillslist.append("Unarmored Defense")
        skillslist.append("Martial Arts")
        if level >= 2:
            movement = 10
            if level >= 3:
                print("You have Deflect Missiles and can choose your Monastic Tradition.")
                skillslist.append("Deflect Missiles")
                if level >= 4:
                    print("You have one ability score improvement and Slow Fall.")
                    skillslist.append("Slow Fall")
                    if level >= 5:
                        print("Your martial die is now a d6. You also have an extra attack and Stunning Strike.")
                        skillslist.append("Stunning Strike")
                        if level >= 6:
                            movement = 15
                            print("You have Ki-Empowered Strikes and your 6th-level Monastic Tradition feature.")
                            skillslist.append("ki-Empowered Strikes")
                            skillslist.append("6th-level Monastic Tradition Feature")
                            if level >= 7:
                                print("You have Evasion and Stillness of Mind.")
                                skillslist.append("Evasion")
                                skillslist.append("Stillness of Mind")
                                if level >= 8:
                                    print("You have another ability score improvement.")
                                    if level >= 9:
                                        print("You have an Unarmored Movement Improvement.")
                                        skillslist.append("Unarmored Movement Improvement")
                                        if level >= 10:
                                            movement = 20
                                            print("You have Purity of Body.")
                                            skillslist.append("Purity of Body")
                                            if level >= 11:
                                                print("Your martial arts die is now a d8 and you have your 11th-level Monastic Tradition feature.")
                                                skillslist.append("11th-level Monastic Tradition Feature")
                                                if level >= 12:
                                                    print("You have your third ability score improvement.")
                                                    if level >= 13:
                                                        print("You have Tongue of the Sun and Moon.")
                                                        skillslist.append("Tongue of the Sun and Moon")
                                                        if level >= 14:
                                                            movement = 25
                                                            print("You have Diamond Soul.")
                                                            skillslist.append("Diamond Soul")
                                                            if level >= 15:
                                                                print("You have Timeless Body.")
                                                                skillslist.append("Timeless Body")
                                                                if level >= 16:
                                                                    print("You have a fourth ability score improvement.")
                                                                    if level >= 17:
                                                                        print("Your martial arts die is a d10 and you have your 17th-level Monastic Tradition feature.")
                                                                        skillslist.append("17th-level Monastic Tradition Feature")
                                                                        if level >= 18:
                                                                            movement = 30
                                                                            print("You have Empty Body.")
                                                                            skillslist.append("Empty Body")
                                                                            if level >= 19:
                                                                                print("You have your final ability score improvement.")
                                                                                if level >= 20:
                                                                                    print("You have Perfect Self.")
                                                                                    skillslist.append("Perfect Self")
                                                                                    return movement, skillslist
                                                                                else:
                                                                                    print("Error")
                                                                            else:
                                                                                return movement, skillslist
                                                                        else:
                                                                            return movement, skillslist
                                                                    else:
                                                                        return movement, skillslist
                                                                else:
                                                                    return movement, skillslist
                                                            else:
                                                                return movement, skillslist
                                                        else:
                                                            return movement, skillslist
                                                    else:
                                                        return movement, skillslist
                                                else:
                                                    return movement, skillslist
                                            else:
                                                return movement, skillslist
                                        else:
                                            return movement, skillslist
                                    else:
                                        return movement, skillslist
                                else:
                                    return movement, skillslist
                            else:
                                return movement, skillslist
                        else:
                            return movement, skillslist
                    else:
                        return movement, skillslist
                else:
                    return movement, skillslist
            else:
                return movement, skillslist
        else:
            return movement, skillslist
    else:
        return movement, skillslist

def monk():
    level = choose_level()
    print("Time to roll some stats! For monks, you should prioritize dexterity and wisdom as your highest stats.")
    statlist = stats()
    newstats = abilityscoreimprovement(level, statlist)
    printstats(newstats)
    mods = modifiers(newstats)
    proficiency = proficiencybonus(level)
    print("Your proficiency bonus is", proficiency, "and is added to any ability score you have proficiency in.")
    print("Great, now you have your stats!")
    hitpoints = hitpointcalc(level, "d8") + (mods["constitution"] * level)
    print("You have", hitpoints, "hitpoints.")
    to_hit = hitbonus(mods, "dexterity") + proficiency
    print("You have a", to_hit, "bonus to hit with any spell attacks.")
    db = damagebonus(mods, "dexterity")
    ac = armorclass(mods, "dexterity") + mods["wisdom"]
    print("Your unarmored armor class is a", ac, "to hit. Any roll to hit below this number doesn't hit you!")
    movement, skills = monk_features(level)
    if level >= 3:
        print("You have", level, "ki points to spend.")
    return level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, movement, skills
#monk()

def rogue_features(level):
    sneakattack = 0
    if level >= 1:
        print("You have three first-level features: Expertise, Sneak Attack, and Thieves' Cant.")
        sneakattack = 1
        skillslist.append("Expertise")
        skillslist.append("Sneak Attack")
        skillslist.append("Thieves' Cant")
        if level >= 2:
            print("You have Cunning Action.")
            skillslist.append("Cunning Action")
            if level >= 3:
                print("You can now choose your Roguish Archetype.")
                sneakattack = 2
                if level >= 4:
                    print("You have one ability score improvement.")
                    if level >= 5:
                        sneakattack = 3
                        print("You have Uncanny Dodge.")
                        skillslist.append("Uncanny Dodge")
                        if level >= 6:
                            print("You have Expertise.")
                            skillslist.append("Expertise")
                            if level >= 7:
                                sneakattack = 4
                                print("You have Evasion.")
                                skillslist.append("Evasion")
                                if level >= 8:
                                    print("You have another ability score improvement.")
                                    if level >= 9:
                                        sneakattack = 5
                                        print("You have your 9th-level Roguish Archetype feature.")
                                        skillslist.append("9th-level Roguish Archetype Feature")
                                        if level >= 10:
                                            print("You have another ability score improvement.")
                                            if level >= 11:
                                                print("You have Reliable Talent.")
                                                skillslist.append("Reliable Talent")
                                                if level >= 12:
                                                    print("You have another ability score improvement.")
                                                    if level >= 13:
                                                        sneakattack = 6
                                                        print("You have your 13th-level Roguish Archetype feature.")
                                                        skillslist.append("13th-level Roguish Archetype Feature")
                                                        if level >= 14:
                                                            print("You have Blindsense.")
                                                            skillslist.append("Blindsense")
                                                            if level >= 15:
                                                                sneakattack = 7
                                                                print("You have Slippery Mind.")
                                                                skillslist.append("Slippery Mind")
                                                                if level >= 16:
                                                                    print("You have another ability score improvement.")
                                                                    if level >= 17:
                                                                        sneakattack = 8
                                                                        print("You have your 17th-level Roguish Archetype feature.")
                                                                        skillslist.append("17th-level Roguish Archetype feature")
                                                                        if level >= 18:
                                                                            print("You have Elusive.")
                                                                            skillslist.append("Elusive")
                                                                            if level >= 19:
                                                                                sneakattack = 10
                                                                                print("You have your final ability score improvement.")
                                                                                if level >= 20:
                                                                                    print("You have Stroke of Luck.")
                                                                                    skillslist.append("Stroke of Luck")
                                                                                    return sneakattack, skillslist
                                                                                else:
                                                                                    print("Error")
                                                                            else:
                                                                                return sneakattack, skillslist
                                                                        else:
                                                                            return sneakattack, skillslist
                                                                    else:
                                                                        return sneakattack, skillslist
                                                                else:
                                                                    return sneakattack, skillslist
                                                            else:
                                                                return sneakattack, skillslist
                                                        else:
                                                            return sneakattack, skillslist
                                                    else:
                                                        return sneakattack, skillslist
                                                else:
                                                    return sneakattack, skillslist
                                            else:
                                                return sneakattack, skillslist
                                        else:
                                            return sneakattack, skillslist
                                    else:
                                        return sneakattack, skillslist
                                else:
                                    return sneakattack, skillslist
                            else:
                                return sneakattack, skillslist
                        else:
                            return sneakattack, skillslist
                    else:
                        return sneakattack, skillslist
                else:
                    return sneakattack, skillslist
            else:
                return sneakattack, skillslist
        else:
            return sneakattack, skillslist
    else:
        return sneakattack, skillslist

def rogue():
    level = choose_level()
    print("Time to roll some stats! For rogues, you should prioritize dexterity and either intelligence" + "\n" +
          " for spellcasting or charisma for deception as your highest stats.")
    statlist = stats()
    newstats = abilityscoreimprovement(level, statlist)
    printstats(newstats)
    mods = modifiers(newstats)
    proficiency = proficiencybonus(level)
    print("Your proficiency bonus is", proficiency, "and is added to any ability score you have proficiency in.")
    print("Great, now you have your stats!")
    hitpoints = hitpointcalc(level, "d8") + (mods["constitution"] * level)
    print("You have", hitpoints, "hitpoints.")
    to_hit = hitbonus(mods, "dexterity") + proficiency
    print("You have a", to_hit, "bonus to hit with any spell attacks.")
    db = damagebonus(mods, "dexterity")
    ac = armorclass(mods, "dexterity")
    print("Your unarmored armor class is a", ac, "to hit. Any roll to hit below this number doesn't hit you!")
    sneakattack, skills = rogue_features(level)
    return level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, sneakattack, skills

#rogue()

# So, paladins are not main casters, so their spell list actually only goes to 5th level - they get no cantrips
# But they make up for it by being absolutely beefed out in strength etc, basically a less cool cleric - I am biased
# This is the entire list of paladin spells in the base game and then some
# Also, Spell lists were manually entered in with some clerical alteration from dnd5e.wikidot.com/spells
def paladin_spells():
   inputpalnum = input("""This is a list of paladin spells, it will tell you the Spell Name, School of Magic, Casting Time,
       Range, Duration, and Components. Please enter what level you would like to see the spells for 1-5. If you would like to exit,
       please type 'EXIT':""")

   if inputpalnum == '1':
       pal1 = (['Bless - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M',
                'Ceremony - Evocation - Action(ritual) - Touch - Instantaneous - V,S,M',
                'Command - Enchantment - 1 Action - 60 feet - 1 round - V',
                'Compelled Duel - Enchantment - 1 Bonus Action - 30 feet - Concentration, up to 1 minute - V',
                'Cure Wounds - Evocation - 1 Action - Touch - Instantaneous - V,S',
                'Detect Evil and Good - Divination - 1 Action - Self - Concentration, up to 10 minutes - V,S,M',
                'Detect Magic - Divination - 1 Action(ritual) - Self - Concentration, up to 10 minutes - V,S',
                'Detect Poison and Disease - Divination - 1 Action - Self - Concentration, up to 10 minutes - V,S,M',
                'Divine Favor - Evocation - 1 Bonus Action - Self - Concentration, up to 1 minute - V,S',
                'Heroism - Enchantment - 1 Action - Touch - Concentration, up to 1 minute - V,S',
                'Projection from Good and Evil - Abjuration - 1 Action - Touch - Concentration, up to 10 minutes - V,S,M',
                'Purify Food and Drink - Transmutation - 1 Action9ritual) - 10 feet - Instantaneous - V,S',
                'Searing Smite - Evocation - 1 Bonus Action - Self - Concentration, up to 1 minute - V',
                'Shield of Faith - Abjuration - 1 Bonus Action - 60 feet - Concentration, up to 1 minute - V,S,M'
                'Thunderous Smite - Evocation - 1 Bonus Action - Self - Concentration, up to 1 minute - V',
                'Wrathful Smite - Evocation - 1 Bonus Action - Self - Concentration, up to 1 minute - V'])
       print(*pal1, sep='\n')

   elif inputpalnum == '2':
       pal2 = (['Aid - Abjuration - 1 Action - 30 feet - 8 hours - V,S,M',
                'Branding Smite - Evocation - 1 Bonus Action - Self - Concentration, up to 1 minute - V',
                'Find Steed - Conjuration - 10 Minutes - 30 feet - Instantaneous - V,S',
                'Gentle Repose - Necromancy - 1 Action(ritual) - Touch - 10 days - V,S,M',
                'Lesser Restoration - Abjuration - 1 Action - Touch - Instantaneous - V,S',
                'Locate Object - Divination - 1 Action - Self - Concentration, up to 10 minutes - V,S,M',
                'Magic Weapon - Transmutation - 1 Bonus Action - Touch - Concentration, up to 1 hour - V,S',
                'Prayer of Healing - Evocation - 10 Minutes - 30 feet - Instantaneous - V',
                'Protection from Poison - Abjuration - 1 Action - Touch - 1 hour - V,S',
                'Warding Bond - Abjuration - 1 Action - Touch - 1 hour - V,S',
                'Zone of Truth - Enchantment - 1 Action - 60 feet - 10 minutes - V,S'])
       print(*pal2, sep='\n')

   elif inputpalnum == '3':
       pal3 = (['Aura of Vitality - Evocation - 1 Action - Self(30-foot radius) - Concentration, up to 1 minute - V',
                'Blinding Smite - Evocation - 1 Bonus Action - Self - Concentration, up to 1 minute - V',
                'Create Food and Water - Conjuration - 1 Action - 30 feet - Instantaneous - V,S',
                "Crusader's Mantle - Evocation - 1 Action - Self - Concentration, up to 1 minute - V",
                'Daylight - Evocation - 1 Action - 60 feet - Instantaneous - V,S',
                'Dispel Magic - Abjuration - 1 Action - 120 feet - Instantaneous - V,S',
                'Elemental Weapon - Transmutation - 1 Action - Touch - Concentration, up to 1 hour - V,S',
                'Magic Circle - Abjuration - 1 Minute - 10 feet - 1 hour - V,S,M',
                'Remove Curse - Abjuration - 1 Action - Touch - Instantaneous - V,S',
                'Revivify - Necromancy - 1 Action - Touch - Instantaneous - V,S,M',
                'Spirit Shroud - Necromancy - 1 Bonus Action - Self - Concentration, up to 1 minute - V,S'])
       print(*pal3, sep='\n')

   elif inputpalnum == '4':
       pal4 = (['Aura of Life - Abjuration - 1 Action - Self(30-foot radius) - Concentration, up to 10 minutes - V',
                'Aura of Purity - Abjuration - 1 Action - Self(30-foot radius) - Concentration, up to 10 minutes - V',
                'Banishment - Abjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                'Death Ward - Abjuration - 1 Action - Touch - 8 hours - V,S',
                'Find Grater Steed - Conjuration - 10 Minutes - 30 feet - Instantaneous - V,S',
                'Locate Creature - Divination - 1 Action - Self - Concentration, up to 1 hour - V,S,M',
                'Staggering Smite - Evocation - 1 Bonus Action - Self - Concentration, up to 1 minute - V'])
       print(pal4, sep='\n')

   elif inputpalnum == '5':
       pal5 = (['Banishing Smite - Abjuration - 1 Bonus Action - Self - Concentration, up to 1 minute - V',
                'Circle of Power - Abjuration - 1 Action - Self(30-foot radius) - Concentration, up to 10 minutes - V',
                'Destructive Wave - Evocation - 1 Action - Self(30-foot radius) - Instantaneous - V',
                'Dispel Evil and Good - Abjuration - 1 Action - Self - Concentration, up to 1 minute - V,S,M',
                'Geas - Enchantment - 1 Minute - 60 feet - 30 days - V',
                'Holy Weapon - Evocation - 1 Bonus Action - Touch - Concentration, up to 1 hour - V,S',
                'Raise Dead - Necromancy - 1 Action - Touch - Instantaneous - V,S,M',
                'Summon Celestial - Conjuration - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M'])
       print(*pal5, sep='\n')

   elif inputpalnum == 'EXIT':
       exit(inputpalnum)

def paladin_features(level):
    if level >= 1:
        print("You have two first-level class features: Divine Sense and Lay on Hands.")
        skillslist.append("Divine Sense")
        skillslist.append("Lay on Hands")
        print("You can find a full list of paladin spells here: ")
        if level >= 2:
            spellslots[1] = 2
            print("You can choose your Fighting Style.")
            print("You have Spellcasting and Divine Smite.")
            skillslist.append("Spellcasting")
            skillslist.append("Divine Smite")
            if level >= 3:
                spellslots[1] = 3
                print("You can choose your Sacred Oath.")
                print("You have Divine Health.")
                skillslist.append("Divine Health")
                if level >= 4:
                    print("You have an ability score improvement.")
                    if level >= 5:
                        spellslots[1] = 4
                        spellslots[2] = 2
                        print("You have an extra attack.")
                        skillslist.append("Extra Attack")
                        if level >= 6:
                            print("You have Aura of Protection.")
                            skillslist.append("Aura of Protection")
                            if level >= 7:
                                spellslots[2] = 3
                                print("You have your 7th-level Sacred Oath feature.")
                                skillslist.append("7th-level Sacred Oath Feature")
                                if level >= 8:
                                    print("You have a second ability score improvement.")
                                    if level >= 9:
                                        spellslots[3] = 2
                                        if level >= 10:
                                            print("You have Aura of Courage.")
                                            skillslist.append("Aura of Courage")
                                            if level >= 11:
                                                spellslots[3] = 3
                                                print("You have Improved Divine Smite.")
                                                skillslist.append("Improved Divine Smite")
                                                if level >= 12:
                                                    print("You have a third ability score improvement.")
                                                    if level >= 13:
                                                        spellslots[4] = 1
                                                        if level >= 14:
                                                            print("You have Cleansing Touch.")
                                                            skillslist.append("Cleansing Touch")
                                                            if level >= 15:
                                                                spellslots[4] = 2
                                                                print("You have your 15th-level Sacred Oath feature.")
                                                                skillslist.append("15th-level Sacred Oath Feature")
                                                                if level >= 16:
                                                                    print("You have a fourth ability score improvement.")
                                                                    if level >= 17:
                                                                        spellslots[5] = 1
                                                                        if level >= 18:
                                                                            spellslots[5] = 3
                                                                            print("You have Aura Improvements.")
                                                                            skillslist.append("Aura Improvements")
                                                                            if level >= 19:
                                                                                spellslots[5] = 2
                                                                                print("You have your final ability score improvement.")
                                                                                if level >= 20:
                                                                                    print("You have your 20th-level Sacred Oath feature.")
                                                                                    skillslist.append("20th-level Sacred Oath Feature")
                                                                                    return spellslots, skillslist
                                                                                else:
                                                                                    print("Error")
                                                                            else:
                                                                                return spellslots, skillslist
                                                                        else:
                                                                            return spellslots, skillslist
                                                                    else:
                                                                        return spellslots, skillslist
                                                                else:
                                                                    return spellslots, skillslist
                                                            else:
                                                                return spellslots, skillslist
                                                        else:
                                                            return spellslots, skillslist
                                                    else:
                                                        return spellslots, skillslist
                                                else:
                                                    return spellslots, skillslist
                                            else:
                                                return spellslots, skillslist
                                        else:
                                            return spellslots, skillslist
                                    else: return spellslots, skillslist
                                else:
                                    return spellslots, skillslist
                            else:
                                return spellslots, skillslist
                        else:
                            return spellslots, skillslist
                    else:
                        return spellslots, skillslist
                else:
                    return spellslots, skillslist
            else:
                return spellslots, skillslist
        else:
            return spellslots, skillslist
    else:
        return spellslots, skillslist

def paladin():
    level = choose_level()
    print("Time to roll some stats! For paladins, you should prioritize strength and wisdom as your highest stats.")
    statlist = stats()
    newstats = abilityscoreimprovement(level, statlist)
    printstats(newstats)
    mods = modifiers(newstats)
    proficiency = proficiencybonus(level)
    print("Your proficiency bonus is", proficiency, "and is added to any ability score you have proficiency in.")
    print("Great, now you have your stats!")
    hitpoints = hitpointcalc(level, "d10") + (mods["constitution"] * level)
    print("You have", hitpoints, "hitpoints.")
    to_hit = hitbonus(mods, "strength") + proficiency
    print("You have a", to_hit, "bonus to hit with any spell attacks.")
    db = damagebonus(mods, "strength")
    ac = armorclass(mods, "dexterity")
    print("Your unarmored armor class is a", ac, "to hit. Any roll to hit below this number doesn't hit you!")
    spellslots, skills = paladin_features(level)
    return level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, spellslots, skills

#paladin()

# bards have a lot of spell options at lower levels, but get kind of screwed at higher levels which sucks for them
# All of these were hand typed, I regret nothing
# Also, Spell lists were manually entered in with some alteration from dnd5e.wikidot.com/spells
def bard_spells():
   inputbardnum = input("""This is a list of bard spells, it will tell you the Spell Name, School of Magic, Casting Time,
       Range, Duration, and Components. Please enter what level you would like to see the spells for 0-9. If you would like to exit,
       please type 'EXIT':""")
   if inputbardnum == '0':
       bard0 = (['Blade Ward - Abjuration - 1 Action - Self - 1 round - V,S',
                 'Dancing Lights - Evocation - 1 Action - 120 feet - Concentration, up to 1 minute - V,S,M',
                 'Friends - Enchantment - 1 Action - Self - Concentration, up to 1 minute - S,M',
                 'Light - Evocation - 1 Action - Touch - 1 hour - V,M',
                 'Mage Hand - Conjuration - 1 Action - 30 feet - 1 minute - V,S',
                 'Mending - Transmutation - 1 Minute - Touch - Instantaneous - V,S,M',
                 'Message - Transmutation - 1 Action - 120 feet - 1 round - V,S,M',
                 'Minor Illusion - Illusion - 1 Action - 30 feet - 1 minute - S,M',
                 'Prestidigitation - Transmutation - 1 Action - 10 feet - Up to 1 hour - V,S',
                 'Thunderclap - Evocation - 1 Action - Self(5-foot radius) - Instantaneous - S',
                 'True Strike - Divination - 1 Action - 30 feet - Concentration up to 1 round - S',
                 'Vicious Mockery - Enchantment - 1 Action - 60 feet - Instantaneous - V'])
       print(*bard0, sep='\n')

   elif inputbardnum == '1':
       bard1 = (['Animal Friendship - Enchantment - 1 Action - 30 feet - 24 hours - V,S,M',
                 'Bane - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M',
                 'Charm Person - Enchantment - 1 Action - 30 feet - 1 hour - V,S',
                 'Color Spray - Illusion - 1 Action - Self(15-foot cone) - 1 round - V,S,M',
                 'Command - Enchantment - 1 Action - 60 feet - 1 round - V',
                 'Comprehend Languages - Divination - 1 Action(ritual) - Self - 1 hour - V,S,M',
                 'Cure Wounds - Evocation - 1 Action - Touch - Instantaneous - V,S',
                 'Detect Magic - Divination - 1 Action(ritual) - Self - Concentration, up to 10 minutes - V,S',
                 'Disguise Self - Illusion - 1 Action - Self - 1 hour - V,S',
                 'Dissonant Whispers - Enchantment - 1 Action - 60 feet - Instantaneous - V',
                 'Distort Value - Illusion - 1 Minute - Touch - 8 hours - V',
                 'Earth Tremor - Evocation - 1 Action - Self(10-foot radius) - Instantaneous - V,S',
                 'Faerie Fire - Evocation - 1 Action - 60 feet - Concentration, up to 1 minute - V,S',
                 'Healing Word - Evocation - 1 Bonus Action - 60 feet - Instantaneous - V',
                 'Heroism - Enchantment - 1 Action - Touch - Concentration, up to 1 minute - V,S',
                 'Identify - Divination - 1 Minute(ritual) - Touch - Instantaneous - V,S,M',
                 'Illusory Script - Illusion - 1 Minute(ritual) - Touch - 10 days - S,M',
                 'Longstrider - Transmutation - 1 Action - Touch - 1 hour - V,S,M',
                 'Silent Image - Illusion - 1 Action - 60 Feet - Concentration, up to 10 minutes - V,S,M',
                 'Silvery Barbs - Enchantment - 1 Reaction - 60 feet - Instantaneous - V',
                 'Sleep - Enchantment - 1 Action - 90 feet - 1 minute - V,S,M',
                 'Speak with Animals - Divination - 1 Action(ritual) - Self - 10 minutes - V,S',
                 "Tasha's Hideous Laughter - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M",
                 'Thunderwave - Evocation - 1 Action - Self(15-foot cube) - Instantaneous - V,S',
                 'Unseen Servant - Conjuration - 1 Action(ritual) - 60 feet - 1 hour - V,S,M'])
       print(*bard1, sep='\n')

   elif inputbardnum == '2':
       bard2 = (['Aid - Abjuration - 1 Action - 30 feet - 8 hours - V,S,M',
                 'Animal Messenger - Enchantment - 1 Action(ritual) - 30 feet - 24 hours - V,S,M',
                 'Blindness/Deafness - Necromancy - 1 Action - 30 feet - 1 minute - V',
                 'Borrowed Knowledge - Divination - 1 Action - Self - 1 hour - V,S,M',
                 'Calm Emotions - Enchantment - 1 Action - 60 feet - Concentration, up to 1 minute - V,S',
                 'Cloud of Daggers - Conjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                 'Crown of Madness - Enchantment - 1 Action - 120 feet - Concentration, up to 1 minute - V,S',
                 'Detect Thoughts - Divination - 1 Action - Touch - Concentration, up op 1 minute - V,S,M',
                 'Enhance Ability - Transmutation - 1 Action - Touch - Concentration, up to 1 hour - V,S,M',
                 'Enlarge/Reduce - Transmutation - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M',
                 'Enthrall - Enchantment - 1 Action - 60 feet - 1 minute - V,S',
                 'Gift of Gab - Enchantment - Reaction - Self - Instantaneous - V,S,M',
                 'Heat Metal - Transmutation - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                 'Hold Person - Enchantment - 1 Action - 60 feet - Concentration, up to one minute - V,S,M',
                 'Invisibility - Illusion - 1 Action - Touch - Concentration, up to 1 hour - V,S,M',
                 'Kinetic Jaunt - Transmutation - 1 Bonus Action - Self - Concentration, up to 1 minute - S',
                 'Lesser Restoration - Abjuration - 1 Action - Touch - Instantaneous - V,S',
                 'Locate Animals or Plants - Divination - 1 Action(ritual) - Self - Instantaneous - V,S,M',
                 'Locate Object - Divination - 1 Action - Self - Concentration, up to 10 minutes - V,S,M',
                 'Magic Mouth - Illusion - 1 Minute(ritual) - 30 feet - Until dispelled - V,S,M',
                 'Mirror Image - Illusion - 1 Action - Self - 1 minute - V,S',
                 "Nathair's Mischief - Illusion - 1 Action - 60 feet - Concentration, up to 1 minute - S,M",
                 'Phantasmal Force - Illusion - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                 'Pyrotechnics - Transmutation - 1 Action - 60 feet - Instantaneous - V,S',
                 'See Invisibility - Divination - 1 Action - Self - 1 hour - V,S,M',
                 'Shatter - Evocation - 1 Action - 60 feet - Instantaneous - V,S,M',
                 'Silence - Illusion - 1 Action(ritual) - 120 feet - Concentration, up to 10 minutes - V,S',
                 'Skywrite - Transmutation - 1 Action(ritual) - Sight - Concentration - up to 1 day - V,S',
                 'Suggestion - Enchantment - 1 Action - 30 feet - Concentration, up to 8 hours - V,M',
                 'Warding Wind - Evocation - 1 Action - Self - Concentration, up to 10 minutes - V',
                 'Zone of Truth - Enchantment - 1 Action - 60 feet - 10 minutes - V,S'])
       print(*bard2, sep='\n')

   elif inputbardnum == '3':
       bard3 = (['Bestow Curse - Necromancy - 1 Action - Touch - Concentration, up to 1 minute - V,S',
                 'Catnap - Enchantment - 1 Action - 30 feet - 10 minutes - S,M',
                 'Clairvoyance - Divination - 10 minutes - 1 mile - Concentration, up to 10 minutes - V,S,M',
                 'Dispel Magic - Abjuration - 1 Action - 120 feet - Instantaneous - V,S',
                 'Enemies Abound - Enchantment - 1 Action - 120 feet - Concentration, up to 1 minute - V,S',
                 'Fast Friends - Enchantment - 1 Action - 30 feet - Concentration, up to 1 hour - V',
                 'Fear - Illusion - 1 Action - Self(30-foot cone) - Concentration, up to 1 minute - V,S,M',
                 'Feign Death - Necromancy - 1 Action(ritual) - Touch - 1 hour - V,S,M',
                 'Glyph of Warding - Abjuration - 1 Hour - Touch - Until dispelled or triggered - V,S,M',
                 'Hypnotic Pattern - Illusion - 1 Action - 120 feet - Concentration, up to 1 minute - S,M',
                 'Intellect Fortress - Abjuration - 1 Action - 30 feet - Concentration, up to 1 hour - V',
                 "Leomund's Tiny Hut - Evocation - 1 Minute(ritual) - Self(10-foot radius hemisphere - 8 hours - V,S,M",
                 'Major Image - Illusion - 1 Action - 120 feet - Concentration,up to 10 minutes - V,S,M',
                 'Mass Healing Word - Evocation - 1 Bonus Action - 60 feet - Instantaneous - V',
                 'Motivational Speech - Enchantment - 1 Hour - 60 feet - 1 hour - V',
                 'Nondetection - Abjuration - Abjuration - 1 Action - Touch - 8 hours - V',
                 'Plant Growth - Transmutation - 1 Action or 8 hours - 150 feet - Instantaneous - V,S',
                 'Sending - Evocation - 1 Action - Unlimited - 1 round - V,S,M',
                 'Slow - Transmutation - 1 Action - 120 feet - Concentration, up to 1 minute - V,S,M',
                 'Speak with Dead - Necromancy - 1 Action - 10 feet - 10 minutes -V,S,M',
                 'Speak with Plants - Transmutation - 1 Action - Self(30-foot radius) - 10 minutes - V,S',
                 'Stinking Cloud - Conjuration - 1 Action - 90 feet - Concentration, up to 1 minute - V,S,M',
                 'Tongues - Divination - 1 Action - Touch - 1 hour - V,M'])
       print(*bard3, sep='\n')

   elif inputbardnum == '4':
       bard4 = (['Charm Monster - Enchantment - 1 Action - 30 feet - 1 hour - V,S',
                 'Compulsion - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S',
                 'Confusion - Enchantment - 1 Action - 90 feet - Concentration, up to 1 minute - V,S,M',
                 'Dimension Door - Conjuration - 1 Action - 500 feet - Instantaneous - V',
                 'Freedom of Movement - Abjuration - 1 Action - Touch - 1 hour - V,S,M',
                 'Grater Invisibility - Illusion - 1 Action - Touch - Concentration, up to 1 minute - V,S',
                 'Hallucinatory Terrain - Illusion - 10 Minutes - 300 feet - 24 hours - V,S,M',
                 'Locate Creature - Divination - 1 Action - Self - Concentration, up to 1 hour - V,S,M',
                 'Phantasmal Killer - Illusion - 1 Action - 120 feet - Concentration, up to 1 minute - V,S,M',
                 'Polymorph - Transmutation - 1 Action - 60 feet - Concentration, up to 1 hour - V,S,M',
                 "Raulothim's Psychic Lance - Enchantment - 1 Action - 120 feet - Instantaneous - V"])
       print(bard4, sep='n')

   elif inputbardnum == '5':
       bard5 = (['Animate Objects - Transmutation - 1 Action - 120 feet - Concentration, up to 1 minute - V,S',
                 'Awaken - Transmutation - 8 hours - Touch - Instantaneous - V,S,M',
                 'Dominate Person - Enchantment - 1 Action - 60 feet - Concentration, up to 1 minute - V,S',
                 'Dream - Illusion - 1 Minute - Special - 8 hours - V,S,M',
                 'Geas - Enchantment - 1 Minute - 60 feet - 30 days - V',
                 'Greater Restoration - Abjuration - 1 Action - Touch - Instantaneous - V,S,M',
                 'Hold Monster - Enchantment - 1 Action - 90 feet - Concentration, up to 1 minute - V,S,M',
                 'Legend Lore - Divination - 10 minutes - Self - Instantaneous - V,S,M',
                 'Mass Cure Wounds - Evocation - 1 Action - 60 feet - Instantaneous - V,S',
                 'Mislead - Illusion - 1 Action - Self - Concentration, up to 1 hour - S',
                 'Modify Memory - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S',
                 'Planar Binding - Abjuration - 1 Hour - 60 feet - 24 hours - V,S,M',
                 'Raise Dead - Necromancy - 1 Action - Touch - Instantaneous - V,S,M',
                 "Rary's Telepathic Bond - Divination - 1 Action(ritual) - 30 feet - 1 hour - V,S,M",
                 'Scrying - Divination - 10 Minutes - Self - Concentration, up to 10 minutes - V,S,M',
                 'Seeming - Illusion - 1 Action - 30 feet - 8 hours - V,S',
                 'Skill Empowerment - Transmutation - 1 Action - Touch - Concentration, up to 1 hour - V,S',
                 'Synaptic Static - Enchantment - 1 Action - 120 feet - Instantaneous - V,S',
                 'Teleportation Circle - Conjuration - 1 Minute - 10 feet - 1 round - V,M',])
       print(*bard5, sep='\n')

   elif inputbardnum == '6':
       bard6 = (['Eyebite - Necromancy - 1 Action - Self - Concentration, up to 1 minute - V,S',
                 'Find the Path - Divination - 1 Minute - Self Concentration, up to 1 day - V,S,M',
                 'Guards and Wards - Abjuration - 10 Minutes - Touch - 24 hours - V,S,M',
                 "Heroes' Feast - Conjuration - 10 Minutes - 30 feet - Instantaneous - V,S,M",
                 'Mass Suggestion - Enchantment - 1 Action - 60 feet - 24 hours - V,M',
                 "Otto's Irresistible Dance - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V",
                 'Programmed Illusion - Illusion - 1 Action - 120 feet - Until dispelled - V,S,M',
                 'True Seeing - Divination - 1 Action - Touch - 1 hour - V,S,M',])
       print(*bard6, sep='\n')

   elif inputbardnum == '7':
       bard7 = (['Dream of the Blue Veil - Conjuration - 10 Minutes - 20 feet - 6 hours - V,S,M',
                 'Etherealness - Transmutation - 1 Action - Self - Up to 8 hours - V,S',
                 'Forcecage - Evocation - 1 Action - 100 feet - 1 hour - V,S,M',
                 'Mirage Arcane - Illusion - 10 Minutes - Sight - 10 days - V,S',
                 "Mordenkainen's Magnificent Mansion - Conjuration - 1 Minute - 300 feet - 24 hours - V,S,M",
                 "Mordenkainen's Sword - Evocation - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M",
                 'Prismatic Spray - Evocation - 1 Action - Self(60-foot cone) - Instantaneous - V,S',
                 'Project Image - Illusion - 1 Action - 500 miles - Concentration, up to 1 day - V,S,M',
                 'Regenerate - Transmutation - 1 Minute - Touch - 1 hour - V,S,M',
                 'Resurrection - Necromancy - 1 Hour - Touch -  Instantaneous - V,S,M',
                 'Symbol - Abjuration - 1 Minute - Touch - Until dispelled or triggered - V,S,M',
                 'Teleport - Conjuration - 1 Action - 10 feet - Instantaneous - V',])
       print(*bard7, sep='\n')

   elif inputbardnum == '8':
       bard8 = (['Antipathy/Sympathy - Enchantment - 1 Hour - 60 feet - 10 days - V,S,M',
                 'Dominate Monster - Enchantment - 1 Action - 60 feet - Concentration, up to 1 hour - V,S',
                 'Feeblemind - Enchantment - 1 Action - 150 feet - Instantaneous - V,S,M',
                 'Glibness - Transmutation - 1 Action - Self - 1 hour - V',
                 'Mind Blank - Abjuration - 1 Action - Touch - 24 hours - V,S',
                 'Power Word: Stun - Enchantment - 1 Action - 60 feet - Instantaneous - V,S',])
       print(*bard8, sep='\n')

   elif inputbardnum == '9':
       bard9 = (['Foresight - Divination - 1 Minute - Touch - 8 hours - V,S,M',
                 'Mass Polymorph - Transmutation - 1 Action - 120 feet - Concentration, up to 10 minutes - V,S,M',
                 'Power Word: Heal - Evocation - 1 Action - Touch - Instantaneous - V,S',
                 'Power Word: Kill - Enchantment - 1 Action - 60 feet - Instantaneous - V',
                 'Prismatic Wall - Abjuration - 1 Action - 60 feet - 10 minutes - V,S',
                 'Psychic Scream - Enchantment - 1 Action - 90 feet - Instantaneous - S',
                 'True Polymorph - Transmutation - 1 Action - 30 feet - Concentration, up to 1 hour - V,S,M',])
       print(*bard9, sep='\n')

   elif inputbardnum == 'EXIT':
       exit(inputbardnum)

def bard_features(level):
   if level >= 1:
       print("You have two first-level class features: Spellcasting and Bardic Inspiration (d6). You have the ability to cast Ritual Spells.")
       # bard functions
       spellslots[0] = 2
       spellslots[1] = 2
       skillslist.append("Spellcasting")
       skillslist.append("Bardic Inspiration (d6)")
       skillslist.append("Ritual Spells")
       print("You can find a full list of bard spells here: ")
       if level >= 2:
           spellslots[1] = 3
           print("Jack of All Trades. Song of Rest (d6).")
           skillslist.append("Jack of All Trades")
           skillslist.append("Song of Rest (d6)")
           if level >= 3:
               spellslots[1] = 4
               spellslots[2] = 2
               print("You can pick your Bard College and Expertise.")
               skillslist.append("Bard College")
               skillslist.append("Expertise")
               if level >= 4:
                   spellslots[0] = 3
                   spellslots[2] = 3
                   print("You have an ability score improvement.")
                   if level >= 5:
                       print("Bardic Inspiration (d8). Font of Inspiration.")
                       skillslist.append("Bardic Inspiration (d8)")
                       skillslist.append("Font of Inspiration")
                       spellslots[3] = 2
                       if level >= 6:
                           spellslots[3] = 3
                           print("Countercharm. Bard College feature.")
                           skillslist.append("Countercharm")
                           if level >= 7:
                               spellslots[4] = 1
                               if level >= 8:
                                   spellslots[4] = 2
                                   print("You have a second ability score improvement.")
                                   if level >= 9:
                                       print("Song of Rest (d8).")
                                       skillslist.append("Song of Rest (d8)")
                                       spellslots[4] = 3
                                       spellslots[5] = 1
                                       if level >= 10:
                                           spellslots[0] = 5
                                           spellslots[5] = 2
                                           print("Bardic Inspiration (d10). Expertise. Magical Secrets. ")
                                           skillslist.append("Bardic Inspiration (d10)")
                                           skillslist.append("Magical Secrets")
                                           if level >= 11:
                                               spellslots[6] = 1
                                               if level >= 12:
                                                   print("You have a third ability score improvement.")
                                                   if level >= 13:
                                                       spellslots[7] = 1
                                                       print("Song of Rest (d10).")
                                                       skillslist.append("Song of Rest (d10)")
                                                       if level >= 14:
                                                           print("Magical Secrets. Bard College feature.")
                                                           if level >= 15:
                                                               spellslots[8] = 1
                                                               print("Bardic Inspiration (d12).")
                                                               skillslist.append("Bardic Inspiration (d12)")
                                                               if level >= 16:
                                                                   print("You have a fourth ability score improvement.")
                                                                   if level >= 17:
                                                                       print("Song of Rest (d12).")
                                                                       skillslist.append("Song of Rest (d12)")
                                                                       spellslots[9] = 1
                                                                       if level >= 18:
                                                                           spellslots[5] = 3
                                                                           print("Magical Secrets.")
                                                                           if level >= 19:
                                                                               spellslots[6] = 2
                                                                               print("You have your final ability score improvement.")
                                                                               if level >= 20:
                                                                                   spellslots[7] = 2
                                                                                   print("Superior Inspiration.")
                                                                                   skillslist.append("Superior Inspiration")
                                                                                   return spellslots, skillslist
                                                                               else:
                                                                                   print("Error")
                                                                           else:
                                                                               return spellslots, skillslist
                                                                       else:
                                                                           return spellslots, skillslist
                                                                   else:
                                                                       return spellslots, skillslist
                                                               else:
                                                                   return spellslots, skillslist
                                                           else:
                                                               return spellslots, skillslist
                                                       else:
                                                           return spellslots, skillslist
                                                   else:
                                                       return spellslots, skillslist
                                               else:
                                                   return spellslots, skillslist
                                           else:
                                               return spellslots, skillslist
                                       else:
                                           return spellslots, skillslist
                                   else:
                                       return spellslots, skillslist
                               else:
                                   return spellslots, skillslist
                           else:
                               return spellslots, skillslist
                       else:
                           return spellslots, skillslist
                   else:
                       return spellslots, skillslist
               else:
                   return spellslots, skillslist
           else:
               return spellslots, skillslist
       else:
           return spellslots, skillslist
   else:
       return spellslots, skillslist

def bard():
   level = choose_level()
   print("""Time to roll some stats! For bards, you should prioritize charisma as your highest stat,
             and dexterity as your second highest stat.""")
   statlist = stats()
   newstats = abilityscoreimprovement(level, statlist)
   printstats(newstats)
   mods = modifiers(newstats)
   proficiency = proficiencybonus(level)
   print("Your proficiency bonus is", proficiency, "and is added to any ability score you have proficiency in.")
   print("Great, now you have your stats!")
   hitpoints = hitpointcalc(level, "d8") + (mods["constitution"] * level)
   print("You have", hitpoints, "hitpoints.")
   to_hit = hitbonus(mods, "charisma") + proficiency
   print("You have a", to_hit, "bonus to hit with any spell attacks.")
   db = damagebonus(mods, "strength")
   ac = armorclass(mods, "dexterity")
   print("Your unarmored armor class is a", ac, "to hit. Any roll to hit below this number doesn't hit you!")
   spellslots, skills = bard_features(level)
   return level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, spellslots, skills

# bard

# This is a list of all cleric spells in the base rules - alphabetically and by spell level
# Also, Spell lists were manually entered in with some alteration from dnd5e.wikidot.com/spells
def cleric_spells():
    # This is a list of all cleric spells in the base rules - alphabetically and by spell level
    # Also, Spell lists were manually entered in with some alteration from dnd5e.wikidot.com/spells
    inputclericnum = input("""This is a list of cleric spells, it will tell you the Spell Name, School of Magic, Casting Time,
    Range, Duration, and Components. Please enter what level you would like to see the spells for 0-9. If you would like to exit,
    please type 'EXIT':""")
    if inputclericnum == '0':
        cleric0 = (['Guidance - Divination - 1 Action - Touch - Concentration, up to 1 minute - V,S',
                    'Light - Evocation - 1 Action - Touch - 1 hour - V,M',
                    'Mending - Transmutation - 1 Minute - Touch - Instantaneous - V,S,M',
                    'Resistance - Abjuration - 1 Action - Touch - Concentration, up to 1 minute - V,S',
                    'Sacred Flame - Evocation - 1 Action - 60 feet - Instantaneous - V,S',
                    'Spare the Dying - Necromancy - 1 Action - Touch - Instantaneous - V,S',
                    'Thaumaturgy - Transmutation - 1 Action - 30 feet - Up to 1 minute - V',
                    'Toll the Dead - Necromancy - 1 Action - 60 feet - Instantaneous - V,S',
                    'Word of Radiance - Evocation - 1 Action - 5 feet - Instantaneous - V,S', ])
        print(*cleric0, sep='\n')

    elif inputclericnum == '1':
        cleric1 = (['Bane - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M',
                    'Bless - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M',
                    'Ceremony - Evocation - Action(ritual) - Touch - Instantaneous - V,S,M',
                    'Command - Enchantment - 1 Action - 60 feet - 1 round - V',
                    'Create or Destroy Water - Transmutation - 1 Action - 30 feet - Instantaneous - V,S,M',
                    'Detect Evil and Good - Divination - 1 Action - Self - Concentration, up to 10 minutes - V,S,M',
                    'Detect Magic - Divination - 1 Action(ritual) - Self - Concentration, up to 10 minutes - V,S',
                    'Detect Poison and Disease - Divination - 1 Action - Self - Concentration, up to 10 minutes - V,S,M',
                    'Guiding Bolt - Evocation - 1 Action - 120 feet - 1 round - V,S',
                    'Healing Word - Evocation - 1 Bonus Action - 60 feet - Instantaneous - V',
                    'Inflict Wounds - Necromancy - 1 Action - Touch - Instantaneous - V,S',
                    'Projection from Good and Evil - Abjuration - 1 Action - Touch - Concentration, up to 10 minutes - V,S,M',
                    'Purify Food and Drink - Transmutation - 1 Action9ritual) - 10 feet - Instantaneous - V,S',
                    'Sanctuary - Abjuration - 1 Bonus Action - 30 feet - 1 minute - V,S,M',
                    'Shield of Faith - Abjuration - 1 Bonus Action - 60 feet - Concentration, up to 1 minute - V,S,M'])
        print(*cleric1, sep='\n')

    elif inputclericnum == '2':
        cleric2 = (['Aid - Abjuration - 1 Action - 30 feet - 8 hours - V,S,M',
                    'Augury - Divination - 1 Minute(ritual) - Self - Instantaneous - V,S,M',
                    'Blindness/Deafness - Necromancy - 1 Action - 30 feet - 1 minute - V',
                    'Borrowed Knowledge - Divination - 1 Action - Self - 1 hour - V,S,M',
                    'Calm Emotions - Enchantment - 1 Action - 60 feet - Concentration, up to 1 minute - V,S',
                    'Continual Flame - Evocation - 1 Action - Touch - Until dispelled - V,S,M',
                    'Enhance Ability - Transmutation - 1 Action - Touch - Concentration, up to 1 hour - V,S,M',
                    'Find Traps - Divination - 1 Action - 120 feet - Instantaneous - V,S',
                    'Gentle Repose - Necromancy - 1 Action(ritual) - Touch - 10 days - V,S,M',
                    'Hold Person - Enchantment - 1 Action - 60 feet - Concentration, up to one minute - V,S,M',
                    'Lesser Restoration - Abjuration - 1 Action - Touch - Instantaneous - V,S',
                    'Locate Object - Divination - 1 Action - Self - Concentration, up to 10 minutes - V,S,M',
                    'Prayer of Healing - Evocation - 10 Minutes - 30 feet - Instantaneous - V',
                    'Protection from Poison - Abjuration - 1 Action - Touch - 1 hour - V,S',
                    'Silence - Illusion - 1 Action(ritual) - 120 feet - Concentration, up to 10 minutes - V,S',
                    'Spiritual Weapon - Evocation - 1 Bonus Action - 60 feet - 1 minute - V,S',
                    'Warding Bond - Abjuration - 1 Action - Touch - 1 hour - V,S,M',
                    'Zone of Truth - Enchantment - 1 Action - 60 feet - 10 minutes - V,S'])
        print(*cleric2, sep='\n')

    elif inputclericnum == '3':
        cleric3 = (['Animate Dead - Necromancy - 1 Minute - 10 feet - Instantaneous - V,S,M',
                    'Aura of Vitality - Evocation - 1 Action - Self(30-foot radius) - Concentration, up to 1 minute - V',
                    'Beacon of Hope - Abjuration - 1 Action - 30 feet - Concentration, up to 1 minute - V,S',
                    'Bestow Curse - Necromancy - 1 Action - Touch - Concentration, up to 1 minute - V,S',
                    'Clairvoyance - Divination - 10 minutes - 1 mile - Concentration, up to 10 minutes - V,S,M',
                    'Create Food and Water - Conjuration - 1 Action - 30 feet - Instantaneous - V,S',
                    'Daylight - Evocation - 1 Action - 60 feet - Instantaneous - V,S',
                    'Dispel Magic - Abjuration - 1 Action - 120 feet - Instantaneous - V,S',
                    'Fast Friends - Enchantment - 1 Action - 30 feet - Concentration, up to 1 hour - V',
                    'Feign Death - Necromancy - 1 Action(ritual) - Touch - 1 hour - V,S,M',
                    'Glyph of Warding - Abjuration - 1 Hour - Touch - Until dispelled or triggered - V,S,M',
                    'Incite Greed - Enchantment - 1 Action - 30 feet - Concentration, up to 1 minute - V,S,M',
                    'Life Transference - Necromancy - 1 Action - 30 feet - Instantaneous - V,S',
                    'Magic Circle - Abjuration - 1 Minute - 10 feet - 1 hour - V,S,M',
                    'Mass Healing Word - Evocation - 1 Bonus Action - 60 feet - Instantaneous - V',
                    'Meld into Stone - Transmutation - 1 Action(ritual) - Touch - 8 hours - V,S',
                    'Motivational Speech - Enchantment - 1 Hour - 60 feet - 1 hour - V',
                    'Protection from Energy - Abjuration - 1 Action - Touch - Concentration, up ti 1 hour - V,S',
                    'Remove Curse - Abjuration - 1 Action - Touch - Instantaneous - V,S',
                    'Revivify - Necromancy - 1 Action - Touch - Instantaneous - V,S,M',
                    'Sending - Evocation - 1 Action - Unlimited - 1 round - V,S,M',
                    'Speak with Dead - Necromancy - 1 Action - 10 feet - 10 minutes -V,S,M',
                    'Spirit Guardians - Conjuration - 1 Action - Self(15-foot radius) - Concentration, up to 10 minutes - V,S,M',
                    'Spirit Shroud - Necromancy - 1 Bonus Action - Self - Concentration, up to 1 minute - V,S',
                    'Tongues - Divination - 1 Action - Touch - 1 hour - V,M',
                    'Water Walk - Transmutation - 1 Action(ritual) - 30 feet - 1 hour -V,S,M', ])
        print(*cleric3, sep='\n')

    elif inputclericnum == '4':
        cleric4 = (['Aura of Life - Abjuration - 1 Action - Self(30-foot radius) - Concentration, up to 10 minutes - V',
                    'Aura of Purity - Abjuration - 1 Action - Self(30-foot radius) - Concentration, up to 10 minutes - V',
                    'Banishment - Abjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                    'Control Water - Transmutation - 1 Action - 300 feet - Concentration, up to 10 minutes - V,S,M',
                    'Death Ward - Abjuration - 1 Action - Touch - 8 hours - V,S',
                    'Divination - Divination - 1 Action(ritual) - Self - Instantaneous - V,S,M',
                    'Freedom of Movement - Abjuration - 1 Action - Touch - 1 hour - V,S,M',
                    'Guardian of Faith - Conjuration - 1 Action - 30 feet - 8 hours - V',
                    'Locate Creature - Divination - 1 Action - Self - Concentration, up to 1 hour - V,S,M',
                    'Stone Shape - Transmutation - 1 Action - Touch - Instantaneous - V,S,M', ])
        print(*cleric4, sep='\n')

    elif inputclericnum == '5':
        cleric5 = (['Commune - Divination - 1 Minute(ritual) - Self - 1 minute - V,S,M',
                    'Contagion - Necromancy - 1 Action - Touch - 7 days - V,S',
                    'Dawn - Evocation - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                    'Dispel Evil and Good - Abjuration - 1 Action - Self - Concentration, up to 1 minute - V,S,M',
                    'Flame Strike - Evocation - 1 Action - 60 feet - Instantaneous - V,S,M',
                    'Geas - Enchantment - 1 Minute - 60 feet - 30 days - V',
                    'Greater Restoration - Abjuration - 1 Action - Touch - Instantaneous - V,S,M',
                    'Hallow - Evocation - 24 Hours - Touch - Until dispelled - V,S,M',
                    'Holy Weapon - Evocation - 1 Bonus Action - Touch - Concentration, up to 1 hour - V,S',
                    'Insect Plague - Conjuration - 1 Action - 300 feet - Concentration, up to 10 minutes - V,S,M',
                    'Legend Lore - Divination - 10 minutes - Self - Instantaneous - V,S,M',
                    'Mass Cure Wounds - Evocation - 1 Action - 60 feet - Instantaneous - V,S',
                    'Planar Binding - Abjuration - 1 Hour - 60 feet - 24 hours - V,S,M',
                    'Raise Dead - Necromancy - 1 Action - Touch - Instantaneous - V,S,M',
                    'Scrying - Divination - 10 Minutes - Self - Concentration, up to 10 minutes - V,S,M',
                    'Summon Celestial - Conjuration - 1 Action - 90 feet - Concentration, up to 1 hour - V,S,M', ])
        print(*cleric5, sep='\n')

    elif inputclericnum == '6':
        cleric6 = (['Blade Barrier - Evocation - 1 Action - 90 feet - Concentration, up to 10 minutes - V,S',
                    'Create Undead - Necromancy - 1 Minute - 10 feet - Instantaneous - V,S,M',
                    'Find the Path - Divination - 1 Minute - Self Concentration, up to 1 day - V,S,M',
                    'Forbiddance - Abjuration - 10 Minutes(ritual) - Touch - 1 day - V,S,M',
                    'Harm - Necromancy - 1 Action - 60 feet - Instantaneous - V,S',
                    'Heal - Evocation - 1 Action - 60 feet - Instantaneous - V,S',
                    "Heroes' Feast - Conjuration - 10 Minutes - 30 feet - Instantaneous - V,S,M",
                    'Planar Ally - Conjuration - 1 Action - 60 feet - Instantaneous - V,S',
                    'Sunbeam - Evocation - 1 Action - Self(60-foot line) - Concentration, up to 1 minute - V,S,M',
                    'True Seeing - Divination - 1 Action - Touch - 1 hour - V,S,M',
                    'Word of Recall - Conjuration - 1 Action - 5 feet - Instantaneous - V'])
        print(*cleric6, sep='\n')

    elif inputclericnum == '7':
        cleric7 = (['Conjure Celestial - Conjuration - 1 Minute - 90 feet - Concentration, up to 1 hour - V,S',
                    'Divine Word - Evocation - 1 Bonus Action - 30 feet - Instantaneous - V',
                    'Etherealness - Transmutation - 1 Action - Self - Up to 8 hours - V,S',
                    'Fire Storm - Evocation - 1 Action - 150 feet - Instantaneous - V,S',
                    'Plane Shift - Conjuration - 1 Action - Touch - Instantaneous - V,S,M',
                    'Regenerate - Transmutation - 1 Minute - Touch - 1 hour - V,S,M',
                    'Resurrection - Necromancy - 1 Hour - Touch -  Instantaneous - V,S,M',
                    'Symbol - Abjuration - 1 Minute - Touch - Until dispelled or triggered - V,S,M',
                    'Temple of the Gods - Conjuration - 1 Hour - 120 feet - 24 hours - V,S,M'])
        print(*cleric7, sep='\n')

    elif inputclericnum == '8':
        cleric8 = (
        ['Antimagic Field - Abjuration - 1 Action - Self(10-foot radius sphere) - Concentration, up to 1 hour - V,S,M',
         'Control Water - Transmutation - 10 Minutes - Self(5-mile radius) - Concentration, up to 8 hours - V,S,M',
         'Earthquake - Evocation - 1 Action - 500 feet - Concentration, up to 1 minute - V,S,M',
         'Holy Aura - Abjuration - 1 Action - Self - Concentration, up to 1 minute - V,S,M',
         'Sunburst - Evocation - 1 Action - 150 feet - Instantaneous - V,S,M', ])
        print(*cleric8, sep='\n')

    elif inputclericnum == '9':
        cleric9 = (['Astral Projection - Evocation - 1 Hour - 10 feet - Special - V,S,M',
                    'Gate - Conjuration - 1 Action - 60 feet - Concentration, up to 1 minute - V,S,M',
                    'Power Word: Heal - Evocation - 1 Action - Touch - Instantaneous - V,S',
                    'True Resurrection - Necromancy - 1 Hour - Touch - Instantaneous - V,S,M'])
        print(*cleric9, sep='\n')

    elif inputclericnum == 'EXIT':
        exit(inputclericnum)

def cleric_features(level):
   if level >= 1:
       print("You have two first-level class features: Spellcasting and choose a Divine Domain. You have the ability to cast Ritual Spells.")
       # divine domain function
       spellslots[0] = 2
       spellslots[1] = 2
       skillslist.append("Spellcasting")
       skillslist.append("Divine Domain")
       skillslist.append("Ritual Spells")
       print("You can find a full list of cleric spells here: ")
       if level >= 2:
           spellslots[1] = 3
           print("You gain Channel Divinity (1/rest). Divine Domain feature :")
           if level >= 3:
               spellslots[1] = 4
               spellslots[2] = 2
               if level >= 4:
                   spellslots[0] = 4
                   spellslots[2] = 3
                   print("You have an ability score improvement.")
                   if level >= 5:
                       print("Destroy Undead (CR 1/2).3")
                       skillslist.append("Destroy Undead (CR 1/2)")
                       spellslots[3] = 2
                       if level >= 6:
                           spellslots[3] = 3
                           print("You gained a Divine Domain feature, and may now use Channel Divinity (2/rest).")
                           skillslist.append("Channel Divinity (2/rest)")
                           if level >= 7:
                               spellslots[4] = 1
                               if level >= 8:
                                   spellslots[4] = 2
                                   print("You have a second ability score improvement. Destroy Undead (CR 1). Divine Domain feature.")
                                   if level >= 9:
                                       spellslots[4] = 3
                                       spellslots[5] = 1
                                       if level >= 10:
                                           spellslots[0] = 5
                                           spellslots[5] = 2
                                           print("Divine Intervention.")
                                           skillslist.append("Divine Intervention")
                                           if level >= 11:
                                               spellslots[6] = 1
                                               print("Destroy Undead (CR 2).")
                                               skillslist.append("Destroy Undead (CR 2)")
                                               if level >= 12:
                                                   print("You have a third ability score improvement.")
                                                   if level >= 13:
                                                       spellslots[7] = 1
                                                       if level >= 14:
                                                           print("Destroy Undead (CR 3).")
                                                           skillslist.append("Destroy Undead (CR 3)")
                                                           if level >= 15:
                                                               spellslots[8] = 1
                                                               if level >= 16:
                                                                   print("You have a fourth ability score improvement.")
                                                                   if level >= 17:
                                                                       print("Destroy Undead (CR 4). Divine Domain feature.")
                                                                       spellslots[9] = 1
                                                                       if level >= 18:
                                                                           spellslots[5] = 3
                                                                           print("Channel Divinity (3/rest).")
                                                                           skillslist.append("Channel Divinity (3/rest)")
                                                                           if level >= 19:
                                                                               spellslots[6] = 2
                                                                               print("You have your final ability score improvement.")
                                                                               if level >= 20:
                                                                                   spellslots[7] = 2
                                                                                   print("Divine Intervention Improvement.")
                                                                                   skillslist.append("Divine Intervention Improvement")
                                                                                   return spellslots
                                                                               else:
                                                                                   print("Error")
                                                                           else:
                                                                               return spellslots, skillslist
                                                                       else:
                                                                           return spellslots, skillslist
                                                                   else:
                                                                       return spellslots, skillslist
                                                               else:
                                                                   return spellslots, skillslist
                                                           else:
                                                               return spellslots, skillslist
                                                       else:
                                                           return spellslots, skillslist
                                                   else:
                                                       return spellslots, skillslist
                                               else:
                                                   return spellslots, skillslist
                                           else:
                                               return spellslots, skillslist
                                       else:
                                           return spellslots, skillslist
                                   else:
                                       return spellslots, skillslist
                               else:
                                   return spellslots, skillslist
                           else:
                               return spellslots, skillslist
                       else:
                           return spellslots, skillslist
                   else:
                       return spellslots, skillslist
               else:
                   return spellslots, skillslist
           else:
               return spellslots, skillslist
       else:
           return spellslots, skillslist
   else:
       return spellslots, skillslist

def cleric():
   level = choose_level()
   print("""Time to roll some stats! For clerics, you should prioritize wisdom as your highest stat,
         and constitution or strength as your second highest stat.""")
   statlist = stats()
   newstats = abilityscoreimprovement(level, statlist)
   printstats(newstats)
   mods = modifiers(newstats)
   proficiency = proficiencybonus(level)
   print("Your proficiency bonus is", proficiency, "and is added to any ability score you have proficiency in.")
   print("Great, now you have your stats!")
   hitpoints = hitpointcalc(level, "d8") + (mods["constitution"] * level)
   print("You have", hitpoints, "hitpoints.")
   to_hit = hitbonus(mods, "wisdom") + proficiency
   print("You have a", to_hit, "bonus to hit with any spell attacks.")
   db = damagebonus(mods, "strength")
   ac = armorclass(mods, "dexterity")
   print("Your unarmored armor class is a", ac, "to hit. Any roll to hit below this number doesn't hit you!")
   spellslots, skills = cleric_features(level)
   return level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, spellslots, skills

# cleric

def barbarian_features(level):
   barbarianrage = 0
   if level >= 1:
       print("You have two first-level features: Rage and Unarmored Defense.")
       barbarianrage = 2
       skillslist.append("Rage")
       skillslist.append("Unarmored Defense")
       skillslist.append("Rage Damage +2")
       if level >= 2:
           print("You have Reckless Attacks and Danger Sense.")
           skillslist.append("Reckless Attack")
           skillslist.append("Danger Sense")
           if level >= 3:
               print("You can now choose your Primal Path.")
               barbarianrage = 3
               if level >= 4:
                   print("You have one ability score improvement.")
                   if level >= 5:
                       print("You have an Extra Attack and Fast Movement.")
                       skillslist.append("Extra Attack")
                       skillslist.append("Fast Movement")
                       if level >= 6:
                           print("You have gained a Path Feature.")
                           skillslist.append("Path Feature")
                           barbarianrage = 4
                           if level >= 7:
                               barbarianrage = 4
                               print("You have Feral Instinct.")
                               skillslist.append("Feral Instinct")
                               if level >= 8:
                                   print("You have another ability score improvement.")
                                   if level >= 9:
                                       barbarianrage = 4
                                       print("You have Brutal Critical (1 die). Your rage damage is now +3.")
                                       skillslist.append("Brutal Critical (1die)")
                                       skillslist.append("Rage Damage +3")
                                       if level >= 10:
                                           print("You have a new path feature.")
                                           if level >= 11:
                                               print("You have Relentless Rage.")
                                               skillslist.append("Relentless Rage")
                                               if level >= 12:
                                                   print("You have another ability score improvement.")
                                                   barbarianrage = 5
                                                   if level >= 13:
                                                       print("Brutal Critical(2 dice).")
                                                       skillslist.append("Brutal Critical(2 dice)")
                                                       if level >= 14:
                                                           print("You have a new path feature.")
                                                           if level >= 15:
                                                               print("You have Persistent Rage.")
                                                               skillslist.append("Persistent Rage")
                                                               if level >= 16:
                                                                   print("You have another ability score improvement. Your rage damage is now +4.")
                                                                   skillslist.append("Rage Damage +4")
                                                                   if level >= 17:
                                                                       barbarianrage = 6
                                                                       print("Brutal Critical(3 dice).")
                                                                       skillslist.append("Brutal Critical(3dice)")
                                                                       if level >= 18:
                                                                           print("You have Indomitable Might.")
                                                                           skillslist.append("Indomitable Might")
                                                                           if level >= 19:
                                                                               print("You have your final ability score improvement.")
                                                                               if level >= 20:
                                                                                   print("You have Primal Champion. You ahve an unlimited number of rages.")
                                                                                   skillslist.append("Primal Champion")
                                                                                   skillslist.append("Unlimited Rage Uses")
                                                                                   return barbarianrage, skillslist
                                                                               else:
                                                                                   print("Error")
                                                                           else:
                                                                               return barbarianrage, skillslist
                                                                       else:
                                                                           return barbarianrage, skillslist
                                                                   else:
                                                                       return barbarianrage, skillslist
                                                               else:
                                                                   return barbarianrage, skillslist
                                                           else:
                                                               return barbarianrage, skillslist
                                                       else:
                                                           return barbarianrage, skillslist
                                                   else:
                                                       return barbarianrage, skillslist
                                               else:
                                                   return barbarianrage, skillslist
                                           else:
                                               return barbarianrage, skillslist
                                       else:
                                           return barbarianrage, skillslist
                                   else:
                                       return barbarianrage, skillslist
                               else:
                                   return barbarianrage, skillslist
                           else:
                               return barbarianrage, skillslist
                       else:
                           return barbarianrage, skillslist
                   else:
                       return barbarianrage, skillslist
               else:
                   return barbarianrage, skillslist
           else:
               return barbarianrage, skillslist
       else:
           return barbarianrage, skillslist
   else:
       return barbarianrage, skillslist

def barbarian():
   level = choose_level()
   print("Time to roll some stats! For barbarians, you should prioritize strength first, and constitution second." +'\n'+
         "Barbarians are strong and have the highest health added with the class' rage ability, making them the tanks of D&D.")
   statlist = stats()
   newstats = abilityscoreimprovement(level, statlist)
   printstats(newstats)
   mods = modifiers(newstats)
   proficiency = proficiencybonus(level)
   print("Your proficiency bonus is", proficiency, "and is added to any ability score you have proficiency in.")
   print("Great, now you have your stats!")
   hitpoints = hitpointcalc(level, "d12") + (mods["constitution"] * level)
   print("You have", hitpoints, "hitpoints.")
   to_hit = hitbonus(mods, "dexterity") + proficiency
   print("You have a", to_hit, "bonus to hit with any spell attacks.")
   db = damagebonus(mods, "strength")
   ac = armorclass(mods, "dexterity") + mods["constitution"]
   print("Your unarmored armor class is a", ac, "to hit. Any roll to hit below this number doesn't hit you!")
   barbarianragebonus, skills = barbarian_features(level)
   print("Your rage bonus is ", barbarianragebonus, " added to your attack damage when raging.")
   return level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, barbarianragebonus, skills

#barbarian()

# With character completed, the user may now interact to see their stats chosen etc
def choicemenu(classchoice, name, stats, modifiers, proficiency, hp, ac, tohit, db, skills, classfeatures, level):
    """
    Allows users to print any information about their character or print it to a file
    :param classchoice: Chosen class
    :param name: Character name
    :param stats: stats dictionary
    :param modifiers: modifiers dictionary
    :param proficiency: proficiency bonus
    :param hp: hitpoints
    :param ac: armor class
    :param tohit: bonus to attack rolls
    :param db: damage bonus
    :param skills: list of skills
    :param classfeatures: list of class features
    :param level: chosen level
    :return: none
    """
    print("Now that you have a character, you can see any of your needed info at any time! Here's what you can do: ")
    print("1. Stats" + "\n" + "2. Modifiers" + "\n" + "3. Proficiency Bonus" + "\n" + "4. Hitpoints" + "\n" + "5. Armor Class" + "\n" + "6. Attack Bonus" +
        "\n" + "7. Damage Bonus" + "\n" + "8. Skills List" + "\n" + "9. Class Features (ex. Spell Slots)" + "\n" + "10. Spell Options")
    yesorno = input("Would you like to see any of this information? Y/N ")
    while yesorno == "Y":
        userchoice = input("What information do you want to see? (1-10) ")
        if userchoice == "1":
            printstats(stats)
            yesorno = input("Would you like to print more information? Y/N ")
        elif userchoice == "2":
            printmodifiers(modifiers)
            yesorno = input("Would you like to print more information? Y/N ")
        elif userchoice == "3":
            print("Your proficiency bonus is", proficiency)
            yesorno = input("Would you like to print more information? Y/N ")
        elif userchoice == "4":
            print("You have", hp, "hitpoints")
            yesorno = input("Would you like to print more information? Y/N ")
        elif userchoice == "5":
            print("Your armor class is", ac)
            yesorno = input("Would you like to print more information? Y/N ")
        elif userchoice == "6":
            print("You have a ", tohit, "bonus to hit with primary attacks")
            yesorno = input("Would you like to print more information? Y/N ")
        elif userchoice == "7":
            print("Your damage bonus is", db, "for primary attacks")
            yesorno = input("Would you like to print more information? Y/N ")
        elif userchoice == "8":
            print("Your skills are: ")
            for i in skills:
                print(i)
            yesorno = input("Would you like to print more information? Y/N ")
        elif userchoice == "9":
            if classchoice == "1":
                print("Your class feature is spells")
                print("Your spell slots are:")
                for i in classfeatures.keys():
                    print("Level", i, "spells:", classfeatures[i])
            elif classchoice == "2":
                print("Your class feature is spells")
                print("Your spell slots are:")
                for i in classfeatures.keys():
                    print("Level", i, "spells:", classfeatures[i])
            elif classchoice == "3":
                print("Your class feature is sneak attack")
                print("Your sneak attack damage is", classfeatures)
            elif classchoice == "4":
                print("Your class features are increased movement and ki points")
                print("You have", classfeatures, "additional feet of movement and", level, "ki points")
            elif classchoice == "5":
                print("Your class feature is spells")
                print("Your spells slots are:")
                for i in classfeatures.keys():
                    print("Level", i, "spells:", classfeatures[i])
            elif classchoice == "7":
                print("Your class feature is rage")
                print("Your rage bonus is a", classfeatures)
            elif classchoice == "8":
                print("Your class feature is spells")
                print("Your spells slots are:")
                for i in classfeatures.keys():
                    print("Level", i, "spells:", classfeatures[i])
            yesorno = input("Would you like to print more information? Y/N ")
        elif userchoice == "10":
            if classchoice == "1":
                wizard_spells()
            elif classchoice == "2":
                cleric_spells()
            elif classchoice == "5":
                bard_spells()
            elif classchoice == "7":
                paladin_spells()
            else:
                print("Sorry, your character isn't a spellcasting class.")
            yesorno = input("Would you like to print more information? Y/N ")
        else:
            print("Sorry, that isn't an option. ")
            yesorno = input("Would you like to try again?")

# Menu of options for character
def character_creator():
    """
    Controls the character creator and calls all other main functions
    :return: none
    """
    print("Welcome to the Python D&D Character Creator! In this creator, you'll generate a character of your choice.")
    charactername = input("Please enter your character name: ")
    print("Great! Now, you need to pick your class. Here's a list of classes to choose from:")
    print(class_menu)
    descriptionchoice = input("Would you like to see a description of these classes? Y/N ")
    while descriptionchoice == "Y":
        classchoice = input("Which class (1-7) would you like to see a description of? ")
        classmenu(classchoice)
        descriptionchoice = input("Would you like to read about another class? Y/N ")
    print("Okay, time to pick a class! Here's the list again: ")
    print(class_menu)
    classchoice = input("Which class (1-7) would you like to pick? ")
    tryagain = "Y"
    while tryagain == "Y":
        if classchoice == "1":
            level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, spellslots, skills = wizard()
            choicemenu("1", charactername, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, spellslots, level)
            file = charactername + ".txt"
            with open(file, "w") as f:
                fileprint(charactername, classchoice, level, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, spellslots)
            tryagain = "F"
        elif classchoice == "2":
            level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, spellslots, skills = cleric()
            choicemenu("2", charactername, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, spellslots, level)
            file = charactername + ".txt"
            with open(file, "w") as f:
                fileprint(charactername, classchoice, level, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, spellslots)
            tryagain = "F"
        elif classchoice == "3":
            level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, sneakattack, skills = rogue()
            choicemenu("3", charactername, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, sneakattack, level)
            file = charactername + ".txt"
            with open(file, "w") as f:
                fileprint(charactername, classchoice, level, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, sneakattack)
            rogue()
            tryagain = "F"
        elif classchoice == "4":
            level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, movement, skills = monk()
            choicemenu("4", charactername, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, movement, level)
            file = charactername + ".txt"
            with open(file, "w") as f:
                fileprint(charactername, classchoice, level, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, movement)
            tryagain = "F"
        elif classchoice == "5":
            level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, spellslots, skills = bard()
            choicemenu("5", charactername, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, spellslots, level)
            file = charactername + ".txt"
            with open(file, "w") as f:
                fileprint(charactername, classchoice, level, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, spellslots)
            tryagain = "F"
        elif classchoice == "6":
            level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, rage, skills = barbarian()
            choicemenu("6", charactername, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, rage, level)
            file = charactername + ".txt"
            with open(file, "w") as f:
                fileprint(charactername, classchoice, level, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, rage)
            tryagain = "F"
        elif classchoice == "7":
            level, statlist, mods, proficiency, hitpoints, to_hit, ac, db, spellslots, skills = paladin()
            choicemenu("7", charactername, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills, spellslots, level)
            file = charactername + ".txt"
            with open(file, "w") as f:
                fileprint(charactername, classchoice, level, statlist, mods, proficiency, hitpoints, ac, to_hit, db, skills,
                          spellslots)
            tryagain = "F"
        else:
            tryagain = ("Sorry, that's not an option. Would you like try again? Y/N ")
    print("And there we go! Your character information has been saved as a text file so you can access it whenever you like.")
    print("Thanks for using our character creator!")

character_creator()
